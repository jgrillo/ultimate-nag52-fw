
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'LWR'
*/

#ifdef EGS_SPRINTER_MODE

#ifndef __ECU_LWR_H_
#define __ECU_LWR_H_

#include <stdint.h>
    
#define LWR_530_CAN_ID 0x0530

/** Vehicle level in front */
enum class LWR_530h_FZGN_V {
	SNV = 255, // unknown
};

/** Vehicle level rear */
enum class LWR_530h_FZGN_H {
	SNV = 255, // unknown
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of LWR_530 */
	uint32_t get_canid(){ return LWR_530_CAN_ID; }
    /** Sets Message 'Alwr defect!Please visit the workshop ' */
    void set_ALWR_DEF(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Message 'Alwr defect!Please visit the workshop ' */
    bool get_ALWR_DEF() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Vehicle level in front */
    void set_FZGN_V(LWR_530h_FZGN_V value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Vehicle level in front */
    LWR_530h_FZGN_V get_FZGN_V() const { return (LWR_530h_FZGN_V)(raw >> 40 & 0xff); }
        
    /** Sets Vehicle level rear */
    void set_FZGN_H(LWR_530h_FZGN_H value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Vehicle level rear */
    LWR_530h_FZGN_H get_FZGN_H() const { return (LWR_530h_FZGN_H)(raw >> 32 & 0xff); }
        
} LWR_530;



class ECU_LWR {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case LWR_530_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to LWR_530
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_LWR_530(uint64_t now, uint64_t max_expire_time, LWR_530* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[1];
		uint64_t LAST_FRAME_TIMES[1];
};
#endif // __ECU_LWR_H_

#endif // EGS_SPRINTER_MODE