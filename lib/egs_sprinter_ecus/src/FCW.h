
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'FCW'
*/

#ifdef EGS_SPRINTER_MODE

#ifndef __ECU_FCW_H_
#define __ECU_FCW_H_

#include <stdint.h>
    
#define TX_RQ_RDU_CAN_ID 0x01D8
#define FCW_DISP_RQ_CAN_ID 0x038C
#define ENG_BRK_RQ_RDU_CAN_ID 0x01CF
#define CMS_PI_STAT_CAN_ID 0x01B7

/** Requested Gear, Upper Limit */
enum class TX_RQ_RDU_GrMax_Rq_RDU {
	PASSIV = 0, // unknown
	G1 = 1, // unknown
	G2 = 2, // unknown
	G3 = 3, // unknown
	G4 = 4, // unknown
	G5 = 5, // unknown
	G6 = 6, // unknown
	G7 = 7, // unknown
};

/** Requested Gear, Lower Limit */
enum class TX_RQ_RDU_GrMin_Rq_RDU {
	PASSIVE = 0, // unknown
	G1 = 1, // unknown
	G2 = 2, // unknown
	G3 = 3, // unknown
	G4 = 4, // unknown
	G5 = 5, // unknown
	G6 = 6, // unknown
	G7 = 7, // unknown
};

/** Deactuation request Completely free in D */
enum class TX_RQ_RDU_PwrFreeD_Dsabl_Rq_RDU {
	IDLE = 0, // unknown
	SUPP = 1, // unknown
	ENBL = 2, // unknown
	SNA = 3, // unknown
};

/** Shift Characteristic Displacement Request */
enum class TX_RQ_RDU_ShftChrDsp_Rq_RDU {
	SKL0 = 0, // unknown
	SKL1 = 1, // unknown
	SKL2 = 2, // unknown
	SKL3 = 3, // unknown
	SKL4 = 4, // unknown
	SKL5 = 5, // unknown
	SKL6 = 6, // unknown
	SKL7 = 7, // unknown
	SKL8 = 8, // unknown
	SKL9 = 9, // unknown
	SKL10 = 10, // unknown
};

/** Forward Collision Warning State */
enum class FCW_DISP_RQ_FCW_Stat {
	FCW_OFF = 0, // unknown
	FCW_ACT = 1, // unknown
	FCW_FLT = 2, // unknown
	SNA = 7, // unknown
};

/** FCW Acoustical Warning Request */
enum class FCW_DISP_RQ_FCW_AcustWarn_Rq {
	DSABL = 0, // unknown
	ENBL = 1, // unknown
	NDEF = 2, // unknown
	SNA = 3, // unknown
};

/** FCW Indication Lamp on Request */
enum class FCW_DISP_RQ_FCW_IndLmp_On_Rq {
	OFF = 0, // unknown
	BLINK1 = 1, // unknown
	BLINK2 = 2, // unknown
	SNA = 3, // unknown
};

/** FCW Object of Interest Distance */
enum class FCW_DISP_RQ_FCW_ObjIntrstDist {
	SNV = 255, // unknown
};

/** FCW Object of Interest Distance Equal to Half Speedometer */
enum class FCW_DISP_RQ_FCW_ObjIntrstDist_SPEED_Hf {
	SNV = 255, // unknown
};

/** FCW Object of Interest Distance Equal to Quarter Speedometer */
enum class FCW_DISP_RQ_FCW_ObjIntrstDist_SPEED_Qt {
	SNV = 255, // unknown
};

/** FCW Message Dispay Request */
enum class FCW_DISP_RQ_FCW_MsgDisp_Rq {
	IDLE = 0, // unknown
	MSG1 = 1, // unknown
	MSG2 = 2, // unknown
	SNA = 3, // unknown
};

/** Engine Torque Request */
enum class ENG_BRK_RQ_RDU_EngTrq_Rq_RDU {
	SNV = 255, // unknown
};

/** Stop Coordinator Fashion Request */
enum class ENG_BRK_RQ_RDU_SPCR_Md_Rq_RDU {
	IDLE = 0, // unknown
	SUPP = 1, // unknown
	ENBL = 2, // unknown
	SNA = 3, // unknown
};

/** Request thrust shutdown suppression */
enum class ENG_BRK_RQ_RDU_OFC_Supp_Rq_AS {
	IDLE = 0, // unknown
	SUPP = 1, // unknown
	ENBL = 2, // unknown
	SNV = 3, // unknown
};

/** Active Assistance System */
enum class ENG_BRK_RQ_RDU_SPCR_As_Act {
	IDLE = 0, // unknown
	ADTR_ACTV = 1, // unknown
	NDEF = 2, // unknown
	SNA = 3, // unknown
};

/** Brake Torque Requested */
enum class ENG_BRK_RQ_RDU_BrkTrq_Rq_RDU {
	SNV = 255, // unknown
};

/** Braking Assistance System */
enum class ENG_BRK_RQ_RDU_As_Brk {
	IDLE = 0, // unknown
	DAS_BRK = 2, // unknown
	ABA_BRK = 5, // unknown
	SNA = 15, // unknown
};

/** Collision Mitigation System Vehicle Deceleration Request */
enum class CMS_PI_STAT_CMS_VehDecel_Rq {
	SNV = 255, // unknown
};

/** Collision Mitigation System Braking Request */
enum class CMS_PI_STAT_CMS_Brk_Rq_V2 {
	SNA = 7, // unknown
};

/** Pre-Impact Object Ahead Relative Speed */
enum class CMS_PI_STAT_PI_ObjAhdRelSpd {
	SNV = 255, // unknown
};

/** Pre-Impact Time To Impact Front */
enum class CMS_PI_STAT_PI_TTI_Ft {
	SNV = 255, // unknown
};

/** Collision Mitigation System Time To Impact Right */
enum class CMS_PI_STAT_CMS_TTI_Rt {
	SNV = 255, // unknown
};

/** Collision Mitigation System Time To Impact Left */
enum class CMS_PI_STAT_CMS_TTI_Lt {
	SNV = 255, // unknown
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TX_RQ_RDU */
	uint32_t get_canid(){ return TX_RQ_RDU_CAN_ID; }
    /** Sets Requested Gear, Upper Limit */
    void set_GrMax_Rq_RDU(TX_RQ_RDU_GrMax_Rq_RDU value){ raw = (raw & 0xc7ffffffffffffff) | ((uint64_t)value & 0x7) << 59; }

    /** Gets Requested Gear, Upper Limit */
    TX_RQ_RDU_GrMax_Rq_RDU get_GrMax_Rq_RDU() const { return (TX_RQ_RDU_GrMax_Rq_RDU)(raw >> 59 & 0x7); }
        
    /** Sets Requested Gear, Lower Limit */
    void set_GrMin_Rq_RDU(TX_RQ_RDU_GrMin_Rq_RDU value){ raw = (raw & 0xf8ffffffffffffff) | ((uint64_t)value & 0x7) << 56; }

    /** Gets Requested Gear, Lower Limit */
    TX_RQ_RDU_GrMin_Rq_RDU get_GrMin_Rq_RDU() const { return (TX_RQ_RDU_GrMin_Rq_RDU)(raw >> 56 & 0x7); }
        
    /** Sets Suppression of Dynamic Full Load Down Shift Request */
    void set_DynFLDS_Supp_Rq_RDU(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Suppression of Dynamic Full Load Down Shift Request */
    bool get_DynFLDS_Supp_Rq_RDU() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Active Down Shift */
    void set_ActvDnShift_Rq_RDU(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Active Down Shift */
    bool get_ActvDnShift_Rq_RDU() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets Deactuation request Completely free in D */
    void set_PwrFreeD_Dsabl_Rq_RDU(TX_RQ_RDU_PwrFreeD_Dsabl_Rq_RDU value){ raw = (raw & 0xffcfffffffffffff) | ((uint64_t)value & 0x3) << 52; }

    /** Gets Deactuation request Completely free in D */
    TX_RQ_RDU_PwrFreeD_Dsabl_Rq_RDU get_PwrFreeD_Dsabl_Rq_RDU() const { return (TX_RQ_RDU_PwrFreeD_Dsabl_Rq_RDU)(raw >> 52 & 0x3); }
        
    /** Sets Shift Characteristic Displacement Request */
    void set_ShftChrDsp_Rq_RDU(TX_RQ_RDU_ShftChrDsp_Rq_RDU value){ raw = (raw & 0xfff0ffffffffffff) | ((uint64_t)value & 0xf) << 48; }

    /** Gets Shift Characteristic Displacement Request */
    TX_RQ_RDU_ShftChrDsp_Rq_RDU get_ShftChrDsp_Rq_RDU() const { return (TX_RQ_RDU_ShftChrDsp_Rq_RDU)(raw >> 48 & 0xf); }
        
    /** Sets Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_TX_RQ_RDU(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_TX_RQ_RDU() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_TX_RQ_RDU(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_TX_RQ_RDU() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} TX_RQ_RDU;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of FCW_DISP_RQ */
	uint32_t get_canid(){ return FCW_DISP_RQ_CAN_ID; }
    /** Sets Forward Collision Warning State */
    void set_FCW_Stat(FCW_DISP_RQ_FCW_Stat value){ raw = (raw & 0x8fffffffffffffff) | ((uint64_t)value & 0x7) << 60; }

    /** Gets Forward Collision Warning State */
    FCW_DISP_RQ_FCW_Stat get_FCW_Stat() const { return (FCW_DISP_RQ_FCW_Stat)(raw >> 60 & 0x7); }
        
    /** Sets FCW Acoustical Warning Request */
    void set_FCW_AcustWarn_Rq(FCW_DISP_RQ_FCW_AcustWarn_Rq value){ raw = (raw & 0xf3ffffffffffffff) | ((uint64_t)value & 0x3) << 58; }

    /** Gets FCW Acoustical Warning Request */
    FCW_DISP_RQ_FCW_AcustWarn_Rq get_FCW_AcustWarn_Rq() const { return (FCW_DISP_RQ_FCW_AcustWarn_Rq)(raw >> 58 & 0x3); }
        
    /** Sets FCW Indication Lamp on Request */
    void set_FCW_IndLmp_On_Rq(FCW_DISP_RQ_FCW_IndLmp_On_Rq value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets FCW Indication Lamp on Request */
    FCW_DISP_RQ_FCW_IndLmp_On_Rq get_FCW_IndLmp_On_Rq() const { return (FCW_DISP_RQ_FCW_IndLmp_On_Rq)(raw >> 56 & 0x3); }
        
    /** Sets FCW Object of Interest Distance */
    void set_FCW_ObjIntrstDist(FCW_DISP_RQ_FCW_ObjIntrstDist value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets FCW Object of Interest Distance */
    FCW_DISP_RQ_FCW_ObjIntrstDist get_FCW_ObjIntrstDist() const { return (FCW_DISP_RQ_FCW_ObjIntrstDist)(raw >> 48 & 0xff); }
        
    /** Sets FCW Object of Interest Distance Equal to Half Speedometer */
    void set_FCW_ObjIntrstDist_SPEED_Hf(FCW_DISP_RQ_FCW_ObjIntrstDist_SPEED_Hf value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets FCW Object of Interest Distance Equal to Half Speedometer */
    FCW_DISP_RQ_FCW_ObjIntrstDist_SPEED_Hf get_FCW_ObjIntrstDist_SPEED_Hf() const { return (FCW_DISP_RQ_FCW_ObjIntrstDist_SPEED_Hf)(raw >> 40 & 0xff); }
        
    /** Sets FCW Object of Interest Distance Equal to Quarter Speedometer */
    void set_FCW_ObjIntrstDist_SPEED_Qt(FCW_DISP_RQ_FCW_ObjIntrstDist_SPEED_Qt value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets FCW Object of Interest Distance Equal to Quarter Speedometer */
    FCW_DISP_RQ_FCW_ObjIntrstDist_SPEED_Qt get_FCW_ObjIntrstDist_SPEED_Qt() const { return (FCW_DISP_RQ_FCW_ObjIntrstDist_SPEED_Qt)(raw >> 32 & 0xff); }
        
    /** Sets FCW Message Dispay Request */
    void set_FCW_MsgDisp_Rq(FCW_DISP_RQ_FCW_MsgDisp_Rq value){ raw = (raw & 0xfffffffff8ffffff) | ((uint64_t)value & 0x7) << 24; }

    /** Gets FCW Message Dispay Request */
    FCW_DISP_RQ_FCW_MsgDisp_Rq get_FCW_MsgDisp_Rq() const { return (FCW_DISP_RQ_FCW_MsgDisp_Rq)(raw >> 24 & 0x7); }
        
} FCW_DISP_RQ;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of ENG_BRK_RQ_RDU */
	uint32_t get_canid(){ return ENG_BRK_RQ_RDU_CAN_ID; }
    /** Sets Engine Torque Request Minimum */
    void set_EngTrqMin_Rq_RDU(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Engine Torque Request Minimum */
    bool get_EngTrqMin_Rq_RDU() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Engine Torque Request Maximum */
    void set_EngTrqMax_Rq_RDU(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Engine Torque Request Maximum */
    bool get_EngTrqMax_Rq_RDU() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Engine Torque Request */
    void set_EngTrq_Rq_RDU(ENG_BRK_RQ_RDU_EngTrq_Rq_RDU value){ raw = (raw & 0xe000ffffffffffff) | ((uint64_t)value & 0x1fff) << 48; }

    /** Gets Engine Torque Request */
    ENG_BRK_RQ_RDU_EngTrq_Rq_RDU get_EngTrq_Rq_RDU() const { return (ENG_BRK_RQ_RDU_EngTrq_Rq_RDU)(raw >> 48 & 0x1fff); }
        
    /** Sets ENABLE STOP / START AUTOMATIC REQUEST */
    void set_SSA_Enbl_Rq_RDU(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets ENABLE STOP / START AUTOMATIC REQUEST */
    bool get_SSA_Enbl_Rq_RDU() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Assistance System Stopped Vehicle */
    void set_AS_Veh_Sp(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Assistance System Stopped Vehicle */
    bool get_AS_Veh_Sp() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Stop Coordinator Fashion Request */
    void set_SPCR_Md_Rq_RDU(ENG_BRK_RQ_RDU_SPCR_Md_Rq_RDU value){ raw = (raw & 0xfffff3ffffffffff) | ((uint64_t)value & 0x3) << 42; }

    /** Gets Stop Coordinator Fashion Request */
    ENG_BRK_RQ_RDU_SPCR_Md_Rq_RDU get_SPCR_Md_Rq_RDU() const { return (ENG_BRK_RQ_RDU_SPCR_Md_Rq_RDU)(raw >> 42 & 0x3); }
        
    /** Sets Request thrust shutdown suppression */
    void set_OFC_Supp_Rq_AS(ENG_BRK_RQ_RDU_OFC_Supp_Rq_AS value){ raw = (raw & 0xfffffcffffffffff) | ((uint64_t)value & 0x3) << 40; }

    /** Gets Request thrust shutdown suppression */
    ENG_BRK_RQ_RDU_OFC_Supp_Rq_AS get_OFC_Supp_Rq_AS() const { return (ENG_BRK_RQ_RDU_OFC_Supp_Rq_AS)(raw >> 40 & 0x3); }
        
    /** Sets Active Assistance System */
    void set_SPCR_As_Act(ENG_BRK_RQ_RDU_SPCR_As_Act value){ raw = (raw & 0xfffffffcffffffff) | ((uint64_t)value & 0x3) << 32; }

    /** Gets Active Assistance System */
    ENG_BRK_RQ_RDU_SPCR_As_Act get_SPCR_As_Act() const { return (ENG_BRK_RQ_RDU_SPCR_As_Act)(raw >> 32 & 0x3); }
        
    /** Sets Error Storage Caused by Stop Coordinator */
    void set_SPCR_ErrEntry_Rq(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets Error Storage Caused by Stop Coordinator */
    bool get_SPCR_ErrEntry_Rq() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets Brake Prefill Request */
    void set_BrkPrefill_Rq_RDU(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets Brake Prefill Request */
    bool get_BrkPrefill_Rq_RDU() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets RDU IS OK */
    void set_RDU_Ok(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets RDU IS OK */
    bool get_RDU_Ok() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets Dynamic Brake Torque Requested */
    void set_BrkTrqDyn_Rq_RDU(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets Dynamic Brake Torque Requested */
    bool get_BrkTrqDyn_Rq_RDU() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets Brake Torque Requested */
    void set_BrkTrq_Rq_RDU(ENG_BRK_RQ_RDU_BrkTrq_Rq_RDU value){ raw = (raw & 0xfffffffff000ffff) | ((uint64_t)value & 0xfff) << 16; }

    /** Gets Brake Torque Requested */
    ENG_BRK_RQ_RDU_BrkTrq_Rq_RDU get_BrkTrq_Rq_RDU() const { return (ENG_BRK_RQ_RDU_BrkTrq_Rq_RDU)(raw >> 16 & 0xfff); }
        
    /** Sets Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_ENG_BRK_RQ_RDU(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_ENG_BRK_RQ_RDU() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets Braking Assistance System */
    void set_As_Brk(ENG_BRK_RQ_RDU_As_Brk value){ raw = (raw & 0xfffffffffffff0ff) | ((uint64_t)value & 0xf) << 8; }

    /** Gets Braking Assistance System */
    ENG_BRK_RQ_RDU_As_Brk get_As_Brk() const { return (ENG_BRK_RQ_RDU_As_Brk)(raw >> 8 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 (Polynomial Generator Initial Value 02h). Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_ENG_BRK_RQ_RDU(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 (Polynomial Generator Initial Value 02h). Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_ENG_BRK_RQ_RDU() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} ENG_BRK_RQ_RDU;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of CMS_PI_STAT */
	uint32_t get_canid(){ return CMS_PI_STAT_CAN_ID; }
    /** Sets Collision Mitigation System Vehicle Deceleration Request */
    void set_CMS_VehDecel_Rq(CMS_PI_STAT_CMS_VehDecel_Rq value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Collision Mitigation System Vehicle Deceleration Request */
    CMS_PI_STAT_CMS_VehDecel_Rq get_CMS_VehDecel_Rq() const { return (CMS_PI_STAT_CMS_VehDecel_Rq)(raw >> 56 & 0xff); }
        
    /** Sets Collision Mitigation System Braking Request */
    void set_CMS_Brk_Rq_V2(CMS_PI_STAT_CMS_Brk_Rq_V2 value){ raw = (raw & 0xffe3ffffffffffff) | ((uint64_t)value & 0x7) << 50; }

    /** Gets Collision Mitigation System Braking Request */
    CMS_PI_STAT_CMS_Brk_Rq_V2 get_CMS_Brk_Rq_V2() const { return (CMS_PI_STAT_CMS_Brk_Rq_V2)(raw >> 50 & 0x7); }
        
    /** Sets Pre-Impact Enabled */
    void set_PI_Enbl(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets Pre-Impact Enabled */
    bool get_PI_Enbl() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets Pre-Impact Release Recommendation Front */
    void set_PI_RelsRcmmnd_Ft(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Pre-Impact Release Recommendation Front */
    bool get_PI_RelsRcmmnd_Ft() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets Pre-Impact Object Ahead Relative Speed */
    void set_PI_ObjAhdRelSpd(CMS_PI_STAT_PI_ObjAhdRelSpd value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Pre-Impact Object Ahead Relative Speed */
    CMS_PI_STAT_PI_ObjAhdRelSpd get_PI_ObjAhdRelSpd() const { return (CMS_PI_STAT_PI_ObjAhdRelSpd)(raw >> 40 & 0xff); }
        
    /** Sets Pre-Impact Time To Impact Front */
    void set_PI_TTI_Ft(CMS_PI_STAT_PI_TTI_Ft value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Pre-Impact Time To Impact Front */
    CMS_PI_STAT_PI_TTI_Ft get_PI_TTI_Ft() const { return (CMS_PI_STAT_PI_TTI_Ft)(raw >> 32 & 0xff); }
        
    /** Sets Collision Mitigation System Time To Impact Right */
    void set_CMS_TTI_Rt(CMS_PI_STAT_CMS_TTI_Rt value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Collision Mitigation System Time To Impact Right */
    CMS_PI_STAT_CMS_TTI_Rt get_CMS_TTI_Rt() const { return (CMS_PI_STAT_CMS_TTI_Rt)(raw >> 24 & 0xff); }
        
    /** Sets Collision Mitigation System Time To Impact Left */
    void set_CMS_TTI_Lt(CMS_PI_STAT_CMS_TTI_Lt value){ raw = (raw & 0xffffffffff00ffff) | ((uint64_t)value & 0xff) << 16; }

    /** Gets Collision Mitigation System Time To Impact Left */
    CMS_PI_STAT_CMS_TTI_Lt get_CMS_TTI_Lt() const { return (CMS_PI_STAT_CMS_TTI_Lt)(raw >> 16 & 0xff); }
        
    /** Sets Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_CMS_PI_STAT(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_CMS_PI_STAT() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_CMS_PI_STAT(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_CMS_PI_STAT() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} CMS_PI_STAT;



class ECU_FCW {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case TX_RQ_RDU_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case FCW_DISP_RQ_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                case ENG_BRK_RQ_RDU_CAN_ID:
                    LAST_FRAME_TIMES[2] = timestamp_now;
                    FRAME_DATA[2] = value;
                    return true;
                case CMS_PI_STAT_CAN_ID:
                    LAST_FRAME_TIMES[3] = timestamp_now;
                    FRAME_DATA[3] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to TX_RQ_RDU
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TX_RQ_RDU(uint64_t now, uint64_t max_expire_time, TX_RQ_RDU* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to FCW_DISP_RQ
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_FCW_DISP_RQ(uint64_t now, uint64_t max_expire_time, FCW_DISP_RQ* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
        /** Sets data in pointer to ENG_BRK_RQ_RDU
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENG_BRK_RQ_RDU(uint64_t now, uint64_t max_expire_time, ENG_BRK_RQ_RDU* dest) const {
            if (LAST_FRAME_TIMES[2] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[2] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[2];
                return true;
            }
        }
            
        /** Sets data in pointer to CMS_PI_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_CMS_PI_STAT(uint64_t now, uint64_t max_expire_time, CMS_PI_STAT* dest) const {
            if (LAST_FRAME_TIMES[3] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[3] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[3];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[4];
		uint64_t LAST_FRAME_TIMES[4];
};
#endif // __ECU_FCW_H_

#endif // EGS_SPRINTER_MODE