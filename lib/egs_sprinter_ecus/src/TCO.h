
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'TCO'
*/

#ifdef EGS_SPRINTER_MODE

#ifndef __ECU_TCO_H_
#define __ECU_TCO_H_

#include <stdint.h>
    
#define TCO_5B0_CAN_ID 0x05B0
#define TCO_4B0_CAN_ID 0x04B0
#define TCO_3B0_CAN_ID 0x03B0

/** Seconds */
enum class TCO_5B0h_SECONDS {
	IDLE = 0, // unknown
	DBC_LIM = 1, // unknown
	DBC_AUS = 2, // unknown
	DBC_AUS_TON = 3, // unknown
	DBC_NV_AKT = 4, // unknown
	DBC_NV_LIM = 5, // unknown
	AAS_EIN = 6, // unknown
	AAS_AUS = 7, // unknown
	AAS_AUS_TON = 8, // unknown
	AAS_NV_LIM = 9, // unknown
	AAS_NV_OBJ = 10, // unknown
	AAS_NV_FBED = 11, // unknown
	AAS_FOLGEN = 12, // unknown
	AAS_OBJ_VERLUST = 13, // unknown
	AAS_OBJ_WECHSEL = 14, // unknown
	PAS_EIN = 15, // unknown
	PAS_AUS = 16, // unknown
	PAS_NV = 17, // unknown
};

/** Minute */
enum class TCO_5B0h_MINUTES {
	SNV = 255, // unknown
};

/** Hours */
enum class TCO_5B0h_HOURS {
	SNV = 255, // unknown
};

/** Month */
enum class TCO_5B0h_MONTH {
	NORM = 0, // unknown
	INIT = 1, // unknown
	DIAG = 2, // unknown
	EMT = 3, // unknown
	TBCC = 4, // unknown
	FLT = 5, // unknown
	CTRL_ACTV = 6, // unknown
	AMG_OFF = 7, // unknown
	OFF_AMG_SPORT = 8, // unknown
};

/** Day */
enum class TCO_5B0h_DAY {
	TBCC_OFF = 0, // unknown
	TBCC_ON = 1, // unknown
	TBCC_REG_ACTV = 2, // unknown
	SNA = 3, // unknown
};

/** Year */
enum class TCO_5B0h_YEAR {
	IDLE = 0, // unknown
	SUPP = 1, // unknown
	ENBL = 2, // unknown
	SNV = 3, // unknown
};

/** Local Minute Offset */
enum class TCO_5B0h_M_OFFSET {
	BREMSE_NBET = 0, // unknown
	BREMSE_BET = 1, // unknown
	SNV = 3, // unknown
};

/** Local Hour Offset */
enum class TCO_5B0h_D_OFFSET {
	SNV = 255, // unknown
};

/** Vehicle Distance */
enum class TCO_4B0h_DIST_TOTAL {
	OK = 0, // unknown
	SCHMUTZ = 1, // unknown
	ART_DEF = 2, // unknown
	ART_LIM_DEF = 3, // unknown
	EXT = 4, // unknown
	DBC_DEF = 5, // unknown
	SCHMUTZ_DBC_DEF = 6, // unknown
	ART_DBC_DEF = 7, // unknown
	ART_LIM_DBC_DEF = 8, // unknown
	EXT_DBC = 9, // unknown
};

/** Trip distance */
enum class TCO_4B0h_DIST_TRIP {
	SNV = 255, // unknown
};

/** Drive Recognize */
enum class TCO_3B0h_D_REC {
	N_DEF = 0, // unknown
	LO = 1, // unknown
	MID = 2, // unknown
	HI = 3, // unknown
};

/** Driver 2 Working State */
enum class TCO_3B0h_D2_W_STAT {
	PASSIVE = 0, // unknown
	G1 = 1, // unknown
	G2 = 2, // unknown
	G3 = 3, // unknown
	G4 = 4, // unknown
	G5 = 5, // unknown
	G6 = 6, // unknown
	G7 = 7, // unknown
};

/** Driver 1 Working State */
enum class TCO_3B0h_D1_W_STAT {
	PASSIVE = 0, // unknown
	G1 = 1, // unknown
	G2 = 2, // unknown
	G3 = 3, // unknown
	G4 = 4, // unknown
	G5 = 5, // unknown
	G6 = 6, // unknown
	G7 = 7, // unknown
};

/** Overspeed */
enum class TCO_3B0h_OVERSPEED {
	NBET = 0, // unknown
	NDEF = 1, // unknown
	BET = 2, // unknown
	SNV = 3, // unknown
};

/** Driver 1 card */
enum class TCO_3B0h_D1_CARD {
	GS_OK = 0, // unknown
	GS_NOK = 1, // unknown
	GS_FEHLER = 2, // unknown
	SNV = 3, // unknown
};

/** Driver 1 Time Related States */
enum class TCO_3B0h_D1_TR_STAT {
	GS_OK = 0, // unknown
	GS_NOK = 1, // unknown
	GS_FEHLER = 2, // unknown
	SNV = 3, // unknown
};

/** Driver 2 Card */
enum class TCO_3B0h_D2_CARD {
	MH_ZU = 0, // unknown
	MH_AUF = 1, // unknown
	NDEF = 2, // unknown
	SNV = 3, // unknown
};

/** Driver 2 Time Related States */
enum class TCO_3B0h_D2_TR_STAT {
	SNV = 255, // unknown
};

/** System Performance */
enum class TCO_3B0h_SYS_PER {
	NDEF0 = 0, // unknown
	OK = 1, // unknown
	ERROR = 2, // unknown
	SNA = 3, // unknown
};

/** Handling Information */
enum class TCO_3B0h_HAND_INFO {
	NDEF0 = 0, // unknown
	OK = 1, // unknown
	ERROR = 2, // unknown
	SNA = 3, // unknown
};

/** System Event */
enum class TCO_3B0h_SYS_EVENT {
	NBET = 0, // unknown
	BET = 1, // unknown
	NDEF = 2, // unknown
	SNV = 3, // unknown
};

/** Tachograph Output Shaft Speed */
enum class TCO_3B0h_TACH_ROTA {
	OK = 0, // unknown
	RANGE_HIGH = 1, // unknown
	RANGE_LOW = 2, // unknown
	SHORT_BAT = 3, // unknown
	OPEN = 4, // unknown
	SHORT_GND = 5, // unknown
	SNA = 7, // unknown
};

/** Tachographe Vehicle Speed */
enum class TCO_3B0h_TACH_SPEED {
	D = 5, // unknown
	N = 6, // unknown
	R = 7, // unknown
	P = 8, // unknown
	PLUS = 9, // unknown
	MINUS = 10, // unknown
	N_ZW_D = 11, // unknown
	R_ZW_N = 12, // unknown
	P_ZW_R = 13, // unknown
	SNV = 15, // unknown
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TCO_5B0 */
	uint32_t get_canid(){ return TCO_5B0_CAN_ID; }
    /** Sets Seconds */
    void set_SECONDS(TCO_5B0h_SECONDS value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Seconds */
    TCO_5B0h_SECONDS get_SECONDS() const { return (TCO_5B0h_SECONDS)(raw >> 56 & 0xff); }
        
    /** Sets Minute */
    void set_MINUTES(TCO_5B0h_MINUTES value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Minute */
    TCO_5B0h_MINUTES get_MINUTES() const { return (TCO_5B0h_MINUTES)(raw >> 48 & 0xff); }
        
    /** Sets Hours */
    void set_HOURS(TCO_5B0h_HOURS value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Hours */
    TCO_5B0h_HOURS get_HOURS() const { return (TCO_5B0h_HOURS)(raw >> 40 & 0xff); }
        
    /** Sets Month */
    void set_MONTH(TCO_5B0h_MONTH value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Month */
    TCO_5B0h_MONTH get_MONTH() const { return (TCO_5B0h_MONTH)(raw >> 32 & 0xff); }
        
    /** Sets Day */
    void set_DAY(TCO_5B0h_DAY value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Day */
    TCO_5B0h_DAY get_DAY() const { return (TCO_5B0h_DAY)(raw >> 24 & 0xff); }
        
    /** Sets Year */
    void set_YEAR(TCO_5B0h_YEAR value){ raw = (raw & 0xffffffffff00ffff) | ((uint64_t)value & 0xff) << 16; }

    /** Gets Year */
    TCO_5B0h_YEAR get_YEAR() const { return (TCO_5B0h_YEAR)(raw >> 16 & 0xff); }
        
    /** Sets Local Minute Offset */
    void set_M_OFFSET(TCO_5B0h_M_OFFSET value){ raw = (raw & 0xffffffffffff00ff) | ((uint64_t)value & 0xff) << 8; }

    /** Gets Local Minute Offset */
    TCO_5B0h_M_OFFSET get_M_OFFSET() const { return (TCO_5B0h_M_OFFSET)(raw >> 8 & 0xff); }
        
    /** Sets Local Hour Offset */
    void set_D_OFFSET(TCO_5B0h_D_OFFSET value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets Local Hour Offset */
    TCO_5B0h_D_OFFSET get_D_OFFSET() const { return (TCO_5B0h_D_OFFSET)(raw >> 0 & 0xff); }
        
} TCO_5B0;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TCO_4B0 */
	uint32_t get_canid(){ return TCO_4B0_CAN_ID; }
    /** Sets Vehicle Distance */
    void set_DIST_TOTAL(TCO_4B0h_DIST_TOTAL value){ raw = (raw & 0x00000000ffffffff) | ((uint64_t)value & 0xffffffff) << 32; }

    /** Gets Vehicle Distance */
    TCO_4B0h_DIST_TOTAL get_DIST_TOTAL() const { return (TCO_4B0h_DIST_TOTAL)(raw >> 32 & 0xffffffff); }
        
    /** Sets Trip distance */
    void set_DIST_TRIP(TCO_4B0h_DIST_TRIP value){ raw = (raw & 0xffffffff00000000) | ((uint64_t)value & 0xffffffff) << 0; }

    /** Gets Trip distance */
    TCO_4B0h_DIST_TRIP get_DIST_TRIP() const { return (TCO_4B0h_DIST_TRIP)(raw >> 0 & 0xffffffff); }
        
} TCO_4B0;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TCO_3B0 */
	uint32_t get_canid(){ return TCO_3B0_CAN_ID; }
    /** Sets Drive Recognize */
    void set_D_REC(TCO_3B0h_D_REC value){ raw = (raw & 0x3fffffffffffffff) | ((uint64_t)value & 0x3) << 62; }

    /** Gets Drive Recognize */
    TCO_3B0h_D_REC get_D_REC() const { return (TCO_3B0h_D_REC)(raw >> 62 & 0x3); }
        
    /** Sets Driver 2 Working State */
    void set_D2_W_STAT(TCO_3B0h_D2_W_STAT value){ raw = (raw & 0xc7ffffffffffffff) | ((uint64_t)value & 0x7) << 59; }

    /** Gets Driver 2 Working State */
    TCO_3B0h_D2_W_STAT get_D2_W_STAT() const { return (TCO_3B0h_D2_W_STAT)(raw >> 59 & 0x7); }
        
    /** Sets Driver 1 Working State */
    void set_D1_W_STAT(TCO_3B0h_D1_W_STAT value){ raw = (raw & 0xf8ffffffffffffff) | ((uint64_t)value & 0x7) << 56; }

    /** Gets Driver 1 Working State */
    TCO_3B0h_D1_W_STAT get_D1_W_STAT() const { return (TCO_3B0h_D1_W_STAT)(raw >> 56 & 0x7); }
        
    /** Sets Overspeed */
    void set_OVERSPEED(TCO_3B0h_OVERSPEED value){ raw = (raw & 0xff3fffffffffffff) | ((uint64_t)value & 0x3) << 54; }

    /** Gets Overspeed */
    TCO_3B0h_OVERSPEED get_OVERSPEED() const { return (TCO_3B0h_OVERSPEED)(raw >> 54 & 0x3); }
        
    /** Sets Driver 1 card */
    void set_D1_CARD(TCO_3B0h_D1_CARD value){ raw = (raw & 0xffcfffffffffffff) | ((uint64_t)value & 0x3) << 52; }

    /** Gets Driver 1 card */
    TCO_3B0h_D1_CARD get_D1_CARD() const { return (TCO_3B0h_D1_CARD)(raw >> 52 & 0x3); }
        
    /** Sets Driver 1 Time Related States */
    void set_D1_TR_STAT(TCO_3B0h_D1_TR_STAT value){ raw = (raw & 0xfff0ffffffffffff) | ((uint64_t)value & 0xf) << 48; }

    /** Gets Driver 1 Time Related States */
    TCO_3B0h_D1_TR_STAT get_D1_TR_STAT() const { return (TCO_3B0h_D1_TR_STAT)(raw >> 48 & 0xf); }
        
    /** Sets Driver 2 Card */
    void set_D2_CARD(TCO_3B0h_D2_CARD value){ raw = (raw & 0xffffcfffffffffff) | ((uint64_t)value & 0x3) << 44; }

    /** Gets Driver 2 Card */
    TCO_3B0h_D2_CARD get_D2_CARD() const { return (TCO_3B0h_D2_CARD)(raw >> 44 & 0x3); }
        
    /** Sets Driver 2 Time Related States */
    void set_D2_TR_STAT(TCO_3B0h_D2_TR_STAT value){ raw = (raw & 0xfffff0ffffffffff) | ((uint64_t)value & 0xf) << 40; }

    /** Gets Driver 2 Time Related States */
    TCO_3B0h_D2_TR_STAT get_D2_TR_STAT() const { return (TCO_3B0h_D2_TR_STAT)(raw >> 40 & 0xf); }
        
    /** Sets System Performance */
    void set_SYS_PER(TCO_3B0h_SYS_PER value){ raw = (raw & 0xffffffcfffffffff) | ((uint64_t)value & 0x3) << 36; }

    /** Gets System Performance */
    TCO_3B0h_SYS_PER get_SYS_PER() const { return (TCO_3B0h_SYS_PER)(raw >> 36 & 0x3); }
        
    /** Sets Handling Information */
    void set_HAND_INFO(TCO_3B0h_HAND_INFO value){ raw = (raw & 0xfffffff3ffffffff) | ((uint64_t)value & 0x3) << 34; }

    /** Gets Handling Information */
    TCO_3B0h_HAND_INFO get_HAND_INFO() const { return (TCO_3B0h_HAND_INFO)(raw >> 34 & 0x3); }
        
    /** Sets System Event */
    void set_SYS_EVENT(TCO_3B0h_SYS_EVENT value){ raw = (raw & 0xfffffffcffffffff) | ((uint64_t)value & 0x3) << 32; }

    /** Gets System Event */
    TCO_3B0h_SYS_EVENT get_SYS_EVENT() const { return (TCO_3B0h_SYS_EVENT)(raw >> 32 & 0x3); }
        
    /** Sets Tachograph Output Shaft Speed */
    void set_TACH_ROTA(TCO_3B0h_TACH_ROTA value){ raw = (raw & 0xffffffff0000ffff) | ((uint64_t)value & 0xffff) << 16; }

    /** Gets Tachograph Output Shaft Speed */
    TCO_3B0h_TACH_ROTA get_TACH_ROTA() const { return (TCO_3B0h_TACH_ROTA)(raw >> 16 & 0xffff); }
        
    /** Sets Tachographe Vehicle Speed */
    void set_TACH_SPEED(TCO_3B0h_TACH_SPEED value){ raw = (raw & 0xffffffffffff0000) | ((uint64_t)value & 0xffff) << 0; }

    /** Gets Tachographe Vehicle Speed */
    TCO_3B0h_TACH_SPEED get_TACH_SPEED() const { return (TCO_3B0h_TACH_SPEED)(raw >> 0 & 0xffff); }
        
} TCO_3B0;



class ECU_TCO {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case TCO_5B0_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case TCO_4B0_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                case TCO_3B0_CAN_ID:
                    LAST_FRAME_TIMES[2] = timestamp_now;
                    FRAME_DATA[2] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to TCO_5B0
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TCO_5B0(uint64_t now, uint64_t max_expire_time, TCO_5B0* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to TCO_4B0
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TCO_4B0(uint64_t now, uint64_t max_expire_time, TCO_4B0* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
        /** Sets data in pointer to TCO_3B0
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TCO_3B0(uint64_t now, uint64_t max_expire_time, TCO_3B0* dest) const {
            if (LAST_FRAME_TIMES[2] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[2] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[2];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[3];
		uint64_t LAST_FRAME_TIMES[3];
};
#endif // __ECU_TCO_H_

#endif // EGS_SPRINTER_MODE