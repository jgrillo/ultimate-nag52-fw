
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'EZS'
*/

#ifdef EGS_SPRINTER_MODE

#ifndef __ECU_EZS_H_
#define __ECU_EZS_H_

#include <stdint.h>
    
#define ZGW_24C_CAN_ID 0x024C
#define ZGW_248_CAN_ID 0x0248
#define VIN_CAN_ID 0x06FA
#define TF_A2_CAN_ID 0x0045
#define TBCC_RQ_CAN_ID 0x0798
#define SAM_F_A1_CAN_ID 0x0007
#define PSM_A2_CAN_ID 0x0036
#define PSM_3B8_CAN_ID 0x03B8
#define PSM_3B4_CAN_ID 0x03B4
#define PN14_STAT_CAN_ID 0x0205
#define PN14_SG_RQ3_CAN_ID 0x00FE
#define PN14_SG_RQ2_CAN_ID 0x00FF
#define PN14_SG_RQ1_CAN_ID 0x00DE
#define KLA_410_CAN_ID 0x0410
#define KLA_40E_CAN_ID 0x040E
#define GW_I_M1_CAN_ID 0x000A
#define EZS_A12_CAN_ID 0x0180
#define EZS_244_CAN_ID 0x0244
#define EZS_240_CAN_ID 0x0240
#define ENR_3B6_CAN_ID 0x03B6
#define CONFIG_6FF_CAN_ID 0x06FF
#define CONFIG_6F4_CAN_ID 0x06F4

/** Battery voltage */
enum class ZGW_24Ch_U_BATT2 {
	SNV = 255, // unknown
};

/** ECO actuated */
enum class ZGW_24Ch_ECO_BET {
	NBET = 0, // unknown
	BET = 1, // unknown
	NDEF = 2, // unknown
	SNV = 3, // unknown
};

/** Plausibilized bonnet */
enum class ZGW_24Ch_MOT_AUF_PLAUS {
	MH_ZU = 0, // unknown
	MH_AUF = 1, // unknown
	NDEF = 2, // unknown
	SNV = 3, // unknown
};

/** Status BSM warning unit right */
enum class ZGW_24Ch_BSM_WarnUnit_Rt_Stat {
	NDEF0 = 0, // unknown
	OK = 1, // unknown
	ERROR = 2, // unknown
	SNA = 3, // unknown
};

/** Status BSM warning unit left */
enum class ZGW_24Ch_BSM_WarnUnit_Lt_Stat {
	NDEF0 = 0, // unknown
	OK = 1, // unknown
	ERROR = 2, // unknown
	SNA = 3, // unknown
};

/** Curtle passenger */
enum class ZGW_248h_GS_BF {
	GS_OK = 0, // unknown
	GS_NOK = 1, // unknown
	GS_FEHLER = 2, // unknown
	SNV = 3, // unknown
};

/** Curtle driver */
enum class ZGW_248h_GS_F {
	GS_OK = 0, // unknown
	GS_NOK = 1, // unknown
	GS_FEHLER = 2, // unknown
	SNV = 3, // unknown
};

/** Parctronic completely pressed on / off */
enum class ZGW_248h_PTS_BET {
	NBET = 0, // unknown
	NDEF = 1, // unknown
	BET = 2, // unknown
	SNV = 3, // unknown
};

/** Vin signal part */
enum class VIN_VIN_MSG {
	N_DEF = 0, // unknown
	LO = 1, // unknown
	MID = 2, // unknown
	HI = 3, // unknown
};

/** Shift Characteristic Displacement Request */
enum class TBCC_RQ_ShftChrDsp_Rq_TBCC {
	SKL0 = 0, // unknown
	SKL1 = 1, // unknown
	SKL2 = 2, // unknown
	SKL3 = 3, // unknown
	SKL4 = 4, // unknown
	SKL5 = 5, // unknown
	SKL6 = 6, // unknown
	SKL7 = 7, // unknown
	SKL8 = 8, // unknown
	SKL9 = 9, // unknown
	SKL10 = 10, // unknown
};

/** Engine Torque Request */
enum class TBCC_RQ_EngTrq_Rq_TBCC {
	SNV = 255, // unknown
};

/** Brake Torque Requested */
enum class TBCC_RQ_BrkTrq_Rq_TBCC {
	SNV = 255, // unknown
};

/** Requested Gear, Upper Limit */
enum class TBCC_RQ_GrMax_Rq_TBCC {
	PASSIVE = 0, // unknown
	G1 = 1, // unknown
	G2 = 2, // unknown
	G3 = 3, // unknown
	G4 = 4, // unknown
	G5 = 5, // unknown
	G6 = 6, // unknown
	G7 = 7, // unknown
};

/** Requested Gear, Lower Limit */
enum class TBCC_RQ_GrMin_Rq_TBCC {
	PASSIVE = 0, // unknown
	G1 = 1, // unknown
	G2 = 2, // unknown
	G3 = 3, // unknown
	G4 = 4, // unknown
	G5 = 5, // unknown
	G6 = 6, // unknown
	G7 = 7, // unknown
};

/** Backup Battery Voltage */
enum class SAM_F_A1_PN14_BackupBat_Volt {
	SNV = 255, // unknown
};

/** Speed limit */
enum class PSM_3B8h_PSM_V_SOLL {
	SNV = 255, // unknown
};

/** Retarder level */
enum class PSM_3B8h_PSM_RET_STUFE {
	STUFE1 = 0, // unknown
	STUFE2 = 1, // unknown
	STUFE3 = 2, // unknown
	SNV = 3, // unknown
};

/** Motoroll speed ADR */
enum class PSM_3B4h_PSM_N_SOLL {
	SNV = 255, // unknown
};

/** Maximum engine torque */
enum class PSM_3B4h_PSM_MOM_SOLL {
	SNV = 255, // unknown
};

/** Maximum speed */
enum class PSM_3B4h_PSM_DZ_MAX {
	SNV = 255, // unknown
};

/** Supply Battery Voltage */
enum class PN14_STAT_PN14_SupBat_Volt {
	SNV = 255, // unknown
};

/** Maximum Charge Voltage During Dynamic Function */
enum class PN14_SG_RQ3_PN14_LmtVolt_Max {
	SNV = 255, // unknown
};

/** Supply Battery Voltage With High Precision */
enum class PN14_SG_RQ3_PN14_SupBat_VoltHP {
	SNV = 255, // unknown
};

/** BNM Backup Relay Request */
enum class PN14_SG_RQ2_PN14_BackupRelay_Rq {
	NO_RQ = 0, // unknown
	CLS_RQ = 1, // unknown
	OPN_RQ = 2, // unknown
	SNA = 3, // unknown
};

/** BNM Decouple Relay Request */
enum class PN14_SG_RQ2_PN14_DecoupleRelay_Rq {
	NO_RQ = 0, // unknown
	CLS_RQ = 1, // unknown
	OPN_RQ = 2, // unknown
	SNA = 3, // unknown
};

/** Maximum Charge Voltage During Recuperation */
enum class PN14_SG_RQ2_PN14_RecupVolt_Max {
	SNV = 255, // unknown
};

/** Charge Voltage Request */
enum class PN14_SG_RQ1_PN14_ChrgVolt_Rq {
	SNV = 255, // unknown
};

/** STOP / START DISABLE REQUEST */
enum class PN14_SG_RQ1_SSA_Dsabl_Rq_PN14 {
	IDLE = 0, // unknown
	DSABL_TMP = 1, // unknown
	DASBL_PRMNT = 2, // unknown
	SNA = 3, // unknown
};

/** Minimum Charge Voltage Or Limit Voltage During Starter Fashion */
enum class PN14_SG_RQ1_PN14_StartVolt_Min {
	SNV = 255, // unknown
};

/** Engine Idle Speed Level Request */
enum class PN14_SG_RQ1_PN14_EngIdleRPM_Lvl_Rq {
	IDLE = 0, // unknown
	PN = 1, // unknown
	WSHHT = 2, // unknown
	DIS1 = 3, // unknown
	DIS2 = 4, // unknown
	SNA = 7, // unknown
};

/** refrigerant printing */
enum class KLA_410h_P_KAELTE8 {
	SNV = 255, // unknown
};

/** Torque recording refrigeration compressor */
enum class KLA_410h_M_KOMP {
	SNV = 255, // unknown
};

/** Outdoor air temperature for thermal management */
enum class KLA_410h_T_AUSSEN_WM {
	SNV = 255, // unknown
};

/** Torque recording refrigeration compressor rear */
enum class KLA_410h_M_KOMP2 {
	SNV = 255, // unknown
};

/** Request heat output */
enum class KLA_40Eh_HZL_ANF {
	SNV = 255, // unknown
};

/** ENABLE STOP / START AUTOMATIC REQUEST */
enum class KLA_40Eh_SSA_Enbl_Rq_HVAC {
	IDLE = 0, // unknown
	ENABLE_REQ = 1, // unknown
	NDEF2 = 2, // unknown
	SNA = 3, // unknown
};

/** Status sliding / lifting roof */
enum class GW_I_M1_SHD_ST {
	SHD_ST_ZU = 0, // unknown
	SHD_ST_AUF = 1, // unknown
	HUB_ST_AUF = 2, // unknown
	SHD_ST_ST = 3, // unknown
	SHD_ST_AW = 4, // unknown
	SHD_ST_ZW = 5, // unknown
	HUB_ST_ZW = 6, // unknown
	SNV = 7, // unknown
};

/** Intelligent Headlight Control State */
enum class GW_I_M1_IHC_Stat_V2 {
	IHC_OFF = 0, // unknown
	IHC_ACTV = 1, // unknown
	TEMP_NAVL = 2, // unknown
	SNA = 3, // unknown
};

/** Status Interior light switch */
enum class GW_I_M1_ILS_ST {
	ILS_AUS = 0, // unknown
	ILS_EIN = 1, // unknown
	ILS_AUTO = 2, // unknown
	SNV = 3, // unknown
};

/** Battery voltage */
enum class EZS_244h_U_BATT {
	SNV = 255, // unknown
};

/** left-hand drive / right-hand drive */
enum class EZS_240h_LL_RLC {
	LL = 1, // unknown
	RL = 2, // unknown
	SNV = 3, // unknown
};

/** Status doors */
enum class EZS_240h_Ltch_All_Stat {
	INVALID = 0, // unknown
	CLS = 1, // unknown
	OPN = 2, // unknown
};

/** ASR ON / OFF */
enum class EZS_240h_ASR_BET {
	NBET = 0, // unknown
	AUS_BET = 1, // unknown
	EIN_NDEF = 2, // unknown
	SNV = 3, // unknown
};

/** trailer operation recognized */
enum class EZS_240h_ANH_ERK2 {
	KEIN = 0, // unknown
	OK = 1, // unknown
	SNV = 3, // unknown
};

/** Country code */
enum class EZS_240h_LDC {
	RDW = 0, // unknown
	USA_CAN = 1, // unknown
	SNV = 3, // unknown
};

/** Vehicle level rear */
enum class ENR_3B6h_FZGN_H {
	SNV = 255, // unknown
};

/** S: */
enum class CONFIG_6FFh_LENK_COD {
	HPS = 0, // unknown
	EHPS = 1, // unknown
	EPS = 2, // unknown
	SNA = 3, // unknown
};

/** Country-related SA coding */
enum class CONFIG_6FFh_LAND {
	RDW = 0, // unknown
	C494 = 1, // unknown
	C460 = 2, // unknown
	C498 = 3, // unknown
	C823 = 4, // unknown
	C625 = 5, // unknown
	C623 = 6, // unknown
	SNV = 15, // unknown
};

/** Vehicle code attachments */
enum class CONFIG_6FFh_FCOD_ANBAU {
	SOAU = 0, // unknown
	HAAU = 3, // unknown
	BRAU = 4, // unknown
	INAU = 5, // unknown
	ANNA = 6, // unknown
	SNV = 7, // unknown
};

/** Annual specification */
enum class CONFIG_6FFh_VER_JAHR {
	JAHR00 = 0, // unknown
	JAHR01 = 1, // unknown
	JAHR29 = 29, // unknown
	N_DEF = 30, // unknown
	SB = 31, // unknown
};

/** change year */
enum class CONFIG_6FFh_VER_AE {
	AE1 = 0, // unknown
	AEX = 1, // unknown
	AE2 = 2, // unknown
	SB = 3, // unknown
};

/** S: */
enum class CONFIG_6FFh_EM_Style {
	NO_EM = 0, // unknown
	MH15 = 1, // unknown
	FH_AHS_C_G1 = 2, // unknown
	MH16_P2 = 3, // unknown
	SNA = 63, // unknown
};

/** rear axle translation (NCV2) */
enum class CONFIG_6F4h_ACHSE {
	AC0 = 0, // unknown
	AC1 = 1, // unknown
	AC2 = 2, // unknown
	AC3 = 3, // unknown
	AC4 = 4, // unknown
	AC5 = 5, // unknown
	AC6 = 6, // unknown
	AC7 = 7, // unknown
	AC8 = 8, // unknown
	AC9 = 9, // unknown
	AC10 = 10, // unknown
	AC11 = 11, // unknown
	SNV = 15, // unknown
};

/** Feather variant */
enum class CONFIG_6F4h_FEDER {
	VAR1 = 0, // unknown
	VAR2 = 1, // unknown
	VAR3 = 2, // unknown
	SNV = 3, // unknown
};

/** Stabilizer variant */
enum class CONFIG_6F4h_STABI {
	A = 0, // unknown
	B = 1, // unknown
	C = 2, // unknown
	SNV = 3, // unknown
};

/** Vehicle code Wheel circumference front */
enum class CONFIG_6F4h_FCOD_UMFANG_V {
	SNV = 255, // unknown
};

/** Vehicle code wheel circumference rear */
enum class CONFIG_6F4h_FCOD_UMFANG_H {
	SNV = 255, // unknown
};

/** Vehicle code permissible total weight */
enum class CONFIG_6F4h_FCOD_ZGG_VAN {
	3T = 0, // unknown
	35T = 1, // unknown
	388T = 2, // unknown
	46T = 3, // unknown
	5T = 4, // unknown
	5TAB = 5, // unknown
	42T = 6, // unknown
	SNV = 15, // unknown
};

/** Vehicles roof height */
enum class CONFIG_6F4h_FCOD_HOEHE {
	HOEHE1 = 0, // unknown
	HOEHE2 = 1, // unknown
	HOEHE3 = 2, // unknown
	SNV = 3, // unknown
};

/** Tire type */
enum class CONFIG_6F4h_REIFEN {
	STAN = 0, // unknown
	SUSI = 1, // unknown
	ZWIL = 2, // unknown
	SNV = 3, // unknown
};

/** Vehicle code body */
enum class CONFIG_6F4h_FCOD_KAR {
	FH = 0, // unknown
	DOKA = 1, // unknown
	KAWA = 2, // unknown
	KOMBI = 3, // unknown
	POD = 4, // unknown
	PODTUER = 5, // unknown
	SNV = 7, // unknown
};

/** Vehicle code Frame */
enum class CONFIG_6F4h_FCOD_TIEFRAHMEN {
	NORM = 0, // unknown
	TIEF = 1, // unknown
	SNV = 3, // unknown
};

/** Vehicle code wheelbase */
enum class CONFIG_6F4h_FCOD_RADST {
	KURZ = 0, // unknown
	MITTEL = 1, // unknown
	LANG = 2, // unknown
	ABH_OK = 3, // unknown
	ABH_NOK = 4, // unknown
	SNV = 7, // unknown
};

/** Vehicle code four-wheel drive */
enum class CONFIG_6F4h_FCOD_ALLRAD {
	HECK = 0, // unknown
	FRONT = 1, // unknown
	PERM = 2, // unknown
	PERM_UG = 3, // unknown
	ZUSCH = 4, // unknown
	ZUSCH_UG = 5, // unknown
	SNV = 7, // unknown
};

/** Vehicle code Overhang */
enum class CONFIG_6F4h_FCOD_UEBERHANG {
	UEB1 = 0, // unknown
	UEB2 = 1, // unknown
	UEB3 = 2, // unknown
	UEB4 = 3, // unknown
	SNV = 7, // unknown
};

/** Vehicle code axis translation */
enum class CONFIG_6F4h_FCOD_ACHSE {
	SNV = 255, // unknown
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of ZGW_24C */
	uint32_t get_canid(){ return ZGW_24C_CAN_ID; }
    /** Sets Battery voltage */
    void set_U_BATT2(ZGW_24Ch_U_BATT2 value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Battery voltage */
    ZGW_24Ch_U_BATT2 get_U_BATT2() const { return (ZGW_24Ch_U_BATT2)(raw >> 40 & 0xff); }
        
    /** Sets ECO actuated */
    void set_ECO_BET(ZGW_24Ch_ECO_BET value){ raw = (raw & 0xffffffcfffffffff) | ((uint64_t)value & 0x3) << 36; }

    /** Gets ECO actuated */
    ZGW_24Ch_ECO_BET get_ECO_BET() const { return (ZGW_24Ch_ECO_BET)(raw >> 36 & 0x3); }
        
    /** Sets Plausibilized bonnet */
    void set_MOT_AUF_PLAUS(ZGW_24Ch_MOT_AUF_PLAUS value){ raw = (raw & 0xfffffff3ffffffff) | ((uint64_t)value & 0x3) << 34; }

    /** Gets Plausibilized bonnet */
    ZGW_24Ch_MOT_AUF_PLAUS get_MOT_AUF_PLAUS() const { return (ZGW_24Ch_MOT_AUF_PLAUS)(raw >> 34 & 0x3); }
        
    /** Sets day / night signal */
    void set_NACHT(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets day / night signal */
    bool get_NACHT() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets Status BSM warning unit right */
    void set_BSM_WarnUnit_Rt_Stat(ZGW_24Ch_BSM_WarnUnit_Rt_Stat value){ raw = (raw & 0xffffffffffff3fff) | ((uint64_t)value & 0x3) << 14; }

    /** Gets Status BSM warning unit right */
    ZGW_24Ch_BSM_WarnUnit_Rt_Stat get_BSM_WarnUnit_Rt_Stat() const { return (ZGW_24Ch_BSM_WarnUnit_Rt_Stat)(raw >> 14 & 0x3); }
        
    /** Sets Status BSM warning unit left */
    void set_BSM_WarnUnit_Lt_Stat(ZGW_24Ch_BSM_WarnUnit_Lt_Stat value){ raw = (raw & 0xffffffffffffcfff) | ((uint64_t)value & 0x3) << 12; }

    /** Gets Status BSM warning unit left */
    ZGW_24Ch_BSM_WarnUnit_Lt_Stat get_BSM_WarnUnit_Lt_Stat() const { return (ZGW_24Ch_BSM_WarnUnit_Lt_Stat)(raw >> 12 & 0x3); }
        
    /** Sets S: */
    void set_TUNNEL(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets S: */
    bool get_TUNNEL() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets Light sensor defective / missing */
    void set_LISR_DEF(bool value){ raw = (raw & 0xfffffffffffffbff) | ((uint64_t)value & 0x1) << 10; }

    /** Gets Light sensor defective / missing */
    bool get_LISR_DEF() const { return (bool)(raw >> 10 & 0x1); }
        
    /** Sets Switch on the fog light */
    void set_NSL_EIN(bool value){ raw = (raw & 0xfffffffffffffdff) | ((uint64_t)value & 0x1) << 9; }

    /** Gets Switch on the fog light */
    bool get_NSL_EIN() const { return (bool)(raw >> 9 & 0x1); }
        
    /** Sets high beam is switched on */
    void set_FL_ST_EIN(bool value){ raw = (raw & 0xfffffffffffffeff) | ((uint64_t)value & 0x1) << 8; }

    /** Gets high beam is switched on */
    bool get_FL_ST_EIN() const { return (bool)(raw >> 8 & 0x1); }
        
} ZGW_24C;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of ZGW_248 */
	uint32_t get_canid(){ return ZGW_248_CAN_ID; }
    /** Sets AFL requirement: Switch on low beam */
    void set_AFL_ABL_EIN(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets AFL requirement: Switch on low beam */
    bool get_AFL_ABL_EIN() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets Curtle passenger */
    void set_GS_BF(ZGW_248h_GS_BF value){ raw = (raw & 0xffffffff3fffffff) | ((uint64_t)value & 0x3) << 30; }

    /** Gets Curtle passenger */
    ZGW_248h_GS_BF get_GS_BF() const { return (ZGW_248h_GS_BF)(raw >> 30 & 0x3); }
        
    /** Sets Curtle driver */
    void set_GS_F(ZGW_248h_GS_F value){ raw = (raw & 0xffffffffcfffffff) | ((uint64_t)value & 0x3) << 28; }

    /** Gets Curtle driver */
    ZGW_248h_GS_F get_GS_F() const { return (ZGW_248h_GS_F)(raw >> 28 & 0x3); }
        
    /** Sets Cooler water too low control lamp */
    void set_KWS_KL(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets Cooler water too low control lamp */
    bool get_KWS_KL() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets Parctronic completely pressed on / off */
    void set_PTS_BET(ZGW_248h_PTS_BET value){ raw = (raw & 0xffffffffffcfffff) | ((uint64_t)value & 0x3) << 20; }

    /** Gets Parctronic completely pressed on / off */
    ZGW_248h_PTS_BET get_PTS_BET() const { return (ZGW_248h_PTS_BET)(raw >> 20 & 0x3); }
        
    /** Sets Crash signal from Airbag-SG */
    void set_CRASH(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets Crash signal from Airbag-SG */
    bool get_CRASH() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets Crash ConfirmMit */
    void set_CRASH_CNF(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets Crash ConfirmMit */
    bool get_CRASH_CNF() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets Any Cras Event */
    void set_X_CRASH(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets Any Cras Event */
    bool get_X_CRASH() const { return (bool)(raw >> 16 & 0x1); }
        
} ZGW_248;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of VIN */
	uint32_t get_canid(){ return VIN_CAN_ID; }
    /** Sets Vin signal part */
    void set_VIN_MSG(VIN_VIN_MSG value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Vin signal part */
    VIN_VIN_MSG get_VIN_MSG() const { return (VIN_VIN_MSG)(raw >> 56 & 0x3); }
        
    /** Sets Vin data */
    void set_VIN_DATA( value){ raw = (raw & 0xff00000000000000) | ((uint64_t)value & 0xffffffffffffff) << 0; }

    /** Gets Vin data */
     get_VIN_DATA() const { return ()(raw >> 0 & 0xffffffffffffff); }
        
} VIN;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TF_A2 */
	uint32_t get_canid(){ return TF_A2_CAN_ID; }
    /** Sets window rear right - open automatically */
    void set_FHR_AOE(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets window rear right - open automatically */
    bool get_FHR_AOE() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets rear window left - open automatically */
    void set_FHL_AOE(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets rear window left - open automatically */
    bool get_FHL_AOE() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets window front passenger - open automatically */
    void set_FBF_AOE(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets window front passenger - open automatically */
    bool get_FBF_AOE() const { return (bool)(raw >> 36 & 0x1); }
        
} TF_A2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TBCC_RQ */
	uint32_t get_canid(){ return TBCC_RQ_CAN_ID; }
    /** Sets Shift Characteristic Displacement Request */
    void set_ShftChrDsp_Rq_TBCC(TBCC_RQ_ShftChrDsp_Rq_TBCC value){ raw = (raw & 0x0fffffffffffffff) | ((uint64_t)value & 0xf) << 60; }

    /** Gets Shift Characteristic Displacement Request */
    TBCC_RQ_ShftChrDsp_Rq_TBCC get_ShftChrDsp_Rq_TBCC() const { return (TBCC_RQ_ShftChrDsp_Rq_TBCC)(raw >> 60 & 0xf); }
        
    /** Sets Suppression of Dynamic Full Load Down Shift Request */
    void set_DynFLDS_Supp_Rq_TBCC(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Suppression of Dynamic Full Load Down Shift Request */
    bool get_DynFLDS_Supp_Rq_TBCC() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Brake Intervention by TBCC Active */
    void set_BrkIntrvntn_Actv_TBCC(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Brake Intervention by TBCC Active */
    bool get_BrkIntrvntn_Actv_TBCC() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Test Bench Cruise Control Regulation Active */
    void set_TBCC_Reg_Actv(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Test Bench Cruise Control Regulation Active */
    bool get_TBCC_Reg_Actv() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Test Bench Cruise Control OK */
    void set_TBCC_Ok(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Test Bench Cruise Control OK */
    bool get_TBCC_Ok() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets Dynamic Engine Torque Request */
    void set_EngTrqDyn_Rq_TBCC(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets Dynamic Engine Torque Request */
    bool get_EngTrqDyn_Rq_TBCC() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Engine Torque Request */
    void set_EngTrq_Rq_TBCC(TBCC_RQ_EngTrq_Rq_TBCC value){ raw = (raw & 0xffe000ffffffffff) | ((uint64_t)value & 0x1fff) << 40; }

    /** Gets Engine Torque Request */
    TBCC_RQ_EngTrq_Rq_TBCC get_EngTrq_Rq_TBCC() const { return (TBCC_RQ_EngTrq_Rq_TBCC)(raw >> 40 & 0x1fff); }
        
    /** Sets Brake Torque Requested */
    void set_BrkTrq_Rq_TBCC(TBCC_RQ_BrkTrq_Rq_TBCC value){ raw = (raw & 0xfffffff000ffffff) | ((uint64_t)value & 0xfff) << 24; }

    /** Gets Brake Torque Requested */
    TBCC_RQ_BrkTrq_Rq_TBCC get_BrkTrq_Rq_TBCC() const { return (TBCC_RQ_BrkTrq_Rq_TBCC)(raw >> 24 & 0xfff); }
        
    /** Sets Active Down Shift */
    void set_ActvDnShift_Rq_TBCC(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets Active Down Shift */
    bool get_ActvDnShift_Rq_TBCC() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets Requested Gear, Upper Limit */
    void set_GrMax_Rq_TBCC(TBCC_RQ_GrMax_Rq_TBCC value){ raw = (raw & 0xffffffffffc7ffff) | ((uint64_t)value & 0x7) << 19; }

    /** Gets Requested Gear, Upper Limit */
    TBCC_RQ_GrMax_Rq_TBCC get_GrMax_Rq_TBCC() const { return (TBCC_RQ_GrMax_Rq_TBCC)(raw >> 19 & 0x7); }
        
    /** Sets Requested Gear, Lower Limit */
    void set_GrMin_Rq_TBCC(TBCC_RQ_GrMin_Rq_TBCC value){ raw = (raw & 0xfffffffffff8ffff) | ((uint64_t)value & 0x7) << 16; }

    /** Gets Requested Gear, Lower Limit */
    TBCC_RQ_GrMin_Rq_TBCC get_GrMin_Rq_TBCC() const { return (TBCC_RQ_GrMin_Rq_TBCC)(raw >> 16 & 0x7); }
        
    /** Sets Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_TBCC_RQ(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_TBCC_RQ() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_TBCC_RQ(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_TBCC_RQ() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} TBCC_RQ;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SAM_F_A1 */
	uint32_t get_canid(){ return SAM_F_A1_CAN_ID; }
    /** Sets Backup Battery Voltage */
    void set_PN14_BackupBat_Volt(SAM_F_A1_PN14_BackupBat_Volt value){ raw = (raw & 0xffffffffffff00ff) | ((uint64_t)value & 0xff) << 8; }

    /** Gets Backup Battery Voltage */
    SAM_F_A1_PN14_BackupBat_Volt get_PN14_BackupBat_Volt() const { return (SAM_F_A1_PN14_BackupBat_Volt)(raw >> 8 & 0xff); }
        
    /** Sets S: */
    void set_PN14_BackupRelay_HW_Fail(bool value){ raw = (raw & 0xfffffffffffffffd) | ((uint64_t)value & 0x1) << 1; }

    /** Gets S: */
    bool get_PN14_BackupRelay_HW_Fail() const { return (bool)(raw >> 1 & 0x1); }
        
    /** Sets Backup Battery Test Finished */
    void set_PN14_BackupBat_Test_Fnshd(bool value){ raw = (raw & 0xfffffffffffffffe) | ((uint64_t)value & 0x1) << 0; }

    /** Gets Backup Battery Test Finished */
    bool get_PN14_BackupBat_Test_Fnshd() const { return (bool)(raw >> 0 & 0x1); }
        
} SAM_F_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of PSM_A2 */
	uint32_t get_canid(){ return PSM_A2_CAN_ID; }
    /** Sets Turn on the warl blink light */
    void set_PSM_WBL_EIN_OBF(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Turn on the warl blink light */
    bool get_PSM_WBL_EIN_OBF() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Turn on light horn */
    void set_PSM_LH_LSS(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Turn on light horn */
    bool get_PSM_LH_LSS() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Turn on high beam */
    void set_PSM_FL_LSS(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Turn on high beam */
    bool get_PSM_FL_LSS() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets directional flashing right */
    void set_PSM_BLI_RE_LSS(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets directional flashing right */
    bool get_PSM_BLI_RE_LSS() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets direction flash left */
    void set_PSM_BLI_LI_LSS(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets direction flash left */
    bool get_PSM_BLI_LI_LSS() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Turn on the signal horn (steering wheel) */
    void set_PSM_SGH_LENK(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Turn on the signal horn (steering wheel) */
    bool get_PSM_SGH_LENK() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets LSS in position III (level 2) */
    void set_PSM_SCH_W_2_L(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets LSS in position III (level 2) */
    bool get_PSM_SCH_W_2_L() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets LSS in position II (level 1) */
    void set_PSM_SCH_W_1_L(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets LSS in position II (level 1) */
    bool get_PSM_SCH_W_1_L() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets LSS in position I (rain sensor operation) */
    void set_PSM_SCH_W_INT(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets LSS in position I (rain sensor operation) */
    bool get_PSM_SCH_W_INT() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Wash actuated */
    void set_PSM_WASCHEN_EIN(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Wash actuated */
    bool get_PSM_WASCHEN_EIN() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets Tippwuck actuated */
    void set_PSM_TIPP_WISCH(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets Tippwuck actuated */
    bool get_PSM_TIPP_WISCH() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets Turn on indoor light rear */
    void set_PSM_IL_HI_EIN(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets Turn on indoor light rear */
    bool get_PSM_IL_HI_EIN() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets Turn on the front light forward */
    void set_PSM_IL_VO_EIN(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets Turn on the front light forward */
    bool get_PSM_IL_VO_EIN() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets Summer turn on from the PSM */
    void set_PSM_SUM(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Summer turn on from the PSM */
    bool get_PSM_SUM() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets Switch on the fog light */
    void set_PSM_NSL_LDS(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Switch on the fog light */
    bool get_PSM_NSL_LDS() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Turn on fog light */
    void set_PSM_NSW_LDS(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Turn on fog light */
    bool get_PSM_NSW_LDS() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Switch on low beam */
    void set_PSM_ABL_LDS(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Switch on low beam */
    bool get_PSM_ABL_LDS() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Switch on parking light */
    void set_PSM_STL_LDS(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets Switch on parking light */
    bool get_PSM_STL_LDS() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets Switch off light */
    void set_PSM_AUS_LDS(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets Switch off light */
    bool get_PSM_AUS_LDS() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets Turn on automatic driving light */
    void set_PSM_AUTO_LDS(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets Turn on automatic driving light */
    bool get_PSM_AUTO_LDS() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets Switch on parking light right */
    void set_PSM_PR_LDS(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets Switch on parking light right */
    bool get_PSM_PR_LDS() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets Switch on parking light on the left */
    void set_PSM_PL_LDS(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets Switch on parking light on the left */
    bool get_PSM_PL_LDS() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets Interior protection passive from PSM */
    void set_PSM_IRS_PASSIV(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets Interior protection passive from PSM */
    bool get_PSM_IRS_PASSIV() const { return (bool)(raw >> 39 & 0x1); }
        
} PSM_A2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of PSM_3B8 */
	uint32_t get_canid(){ return PSM_3B8_CAN_ID; }
    /** Sets Speed Control - Parity Bit */
    void set_PSM_V_PAR(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Speed Control - Parity Bit */
    bool get_PSM_V_PAR() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Speed limit - Togglebit */
    void set_PSM_V_TGL(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Speed limit - Togglebit */
    bool get_PSM_V_TGL() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Speed limit active */
    void set_PSM_V_AKT(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Speed limit active */
    bool get_PSM_V_AKT() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Speed limit */
    void set_PSM_V_SOLL(PSM_3B8h_PSM_V_SOLL value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Speed limit */
    PSM_3B8h_PSM_V_SOLL get_PSM_V_SOLL() const { return (PSM_3B8h_PSM_V_SOLL)(raw >> 48 & 0xff); }
        
    /** Sets Motor Remote Start / Stop - ParityBit */
    void set_PSM_MFSS_PAR(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Motor Remote Start / Stop - ParityBit */
    bool get_PSM_MFSS_PAR() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Motor Remote Start / Stop - Togglebit */
    void set_PSM_MFSS_TGL(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Motor Remote Start / Stop - Togglebit */
    bool get_PSM_MFSS_TGL() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Motor Remote Start active */
    void set_PSM_FERN_START(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Motor Remote Start active */
    bool get_PSM_FERN_START() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Motor Remote Stop active */
    void set_PSM_FERN_STOP(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets Motor Remote Stop active */
    bool get_PSM_FERN_STOP() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets lock accelerator pedal module */
    void set_PSM_FPM_SP(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets lock accelerator pedal module */
    bool get_PSM_FPM_SP() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets Retarder level */
    void set_PSM_RET_STUFE(PSM_3B8h_PSM_RET_STUFE value){ raw = (raw & 0xffffff3fffffffff) | ((uint64_t)value & 0x3) << 38; }

    /** Gets Retarder level */
    PSM_3B8h_PSM_RET_STUFE get_PSM_RET_STUFE() const { return (PSM_3B8h_PSM_RET_STUFE)(raw >> 38 & 0x3); }
        
    /** Sets Retarder actuated */
    void set_PSM_RET_BET(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets Retarder actuated */
    bool get_PSM_RET_BET() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Retarder available */
    void set_PSM_RET_VH(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Retarder available */
    bool get_PSM_RET_VH() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets Status Abh 2 */
    void set_ABH_2_STAT(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets Status Abh 2 */
    bool get_ABH_2_STAT() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets Status Abh 1 */
    void set_ABH_1_STAT(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Status Abh 1 */
    bool get_ABH_1_STAT() const { return (bool)(raw >> 34 & 0x1); }
        
} PSM_3B8;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of PSM_3B4 */
	uint32_t get_canid(){ return PSM_3B4_CAN_ID; }
    /** Sets Labor speed control - Parity bit */
    void set_PSM_ADR_PAR(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Labor speed control - Parity bit */
    bool get_PSM_ADR_PAR() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Labor speed control - Togglebit */
    void set_PSM_ADR_TGL(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Labor speed control - Togglebit */
    bool get_PSM_ADR_TGL() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Labor speed control active */
    void set_PSM_ADR_AKT(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Labor speed control active */
    bool get_PSM_ADR_AKT() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets STOP / START DISABLE REQUEST by MPM */
    void set_SSA_Dsbl_Rq_MPM(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets STOP / START DISABLE REQUEST by MPM */
    bool get_SSA_Dsbl_Rq_MPM() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Motoroll speed ADR */
    void set_PSM_N_SOLL(PSM_3B4h_PSM_N_SOLL value){ raw = (raw & 0xff0000ffffffffff) | ((uint64_t)value & 0xffff) << 40; }

    /** Gets Motoroll speed ADR */
    PSM_3B4h_PSM_N_SOLL get_PSM_N_SOLL() const { return (PSM_3B4h_PSM_N_SOLL)(raw >> 40 & 0xffff); }
        
    /** Sets Tomentic limitation - parity bit */
    void set_PSM_MOM_PAR(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets Tomentic limitation - parity bit */
    bool get_PSM_MOM_PAR() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Tomentic limitation - Togglebit */
    void set_PSM_MOM_TGL(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Tomentic limitation - Togglebit */
    bool get_PSM_MOM_TGL() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets Tomentic limitation active */
    void set_PSM_MOM_AKT(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets Tomentic limitation active */
    bool get_PSM_MOM_AKT() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Maximum engine torque */
    void set_PSM_MOM_SOLL(PSM_3B4h_PSM_MOM_SOLL value){ raw = (raw & 0xffffffe000ffffff) | ((uint64_t)value & 0x1fff) << 24; }

    /** Gets Maximum engine torque */
    PSM_3B4h_PSM_MOM_SOLL get_PSM_MOM_SOLL() const { return (PSM_3B4h_PSM_MOM_SOLL)(raw >> 24 & 0x1fff); }
        
    /** Sets Speed limitation - parity bit */
    void set_PSM_DZ_PAR(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets Speed limitation - parity bit */
    bool get_PSM_DZ_PAR() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets Speed limitation - Togglebit */
    void set_PSM_DZ_TGL(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets Speed limitation - Togglebit */
    bool get_PSM_DZ_TGL() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets Speed limitation active */
    void set_PSM_DZ_AKT(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets Speed limitation active */
    bool get_PSM_DZ_AKT() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets Maximum speed */
    void set_PSM_DZ_MAX(PSM_3B4h_PSM_DZ_MAX value){ raw = (raw & 0xffffffffffff0000) | ((uint64_t)value & 0xffff) << 0; }

    /** Gets Maximum speed */
    PSM_3B4h_PSM_DZ_MAX get_PSM_DZ_MAX() const { return (PSM_3B4h_PSM_DZ_MAX)(raw >> 0 & 0xffff); }
        
} PSM_3B4;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of PN14_STAT */
	uint32_t get_canid(){ return PN14_STAT_CAN_ID; }
    /** Sets Backup Battery Fault */
    void set_PN14_BackupBat_Flt(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Backup Battery Fault */
    bool get_PN14_BackupBat_Flt() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Supply Battery Voltage */
    void set_PN14_SupBat_Volt(PN14_STAT_PN14_SupBat_Volt value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Supply Battery Voltage */
    PN14_STAT_PN14_SupBat_Volt get_PN14_SupBat_Volt() const { return (PN14_STAT_PN14_SupBat_Volt)(raw >> 48 & 0xff); }
        
    /** Sets Generator Management Available, Ready for Activation */
    void set_PN14_GM1_Avl(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets Generator Management Available, Ready for Activation */
    bool get_PN14_GM1_Avl() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets Generator Management Activated */
    void set_PN14_GM1_Actv(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets Generator Management Activated */
    bool get_PN14_GM1_Actv() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets 14 V PowerNet Limp-Home Cutoff Active */
    void set_PN14_LHC_Actv(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets 14 V PowerNet Limp-Home Cutoff Active */
    bool get_PN14_LHC_Actv() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Parking Lamps Request */
    void set_LHC_PkLmp_Rq(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets LIMP-Home Cutoff Parking Lamps Request */
    bool get_LHC_PkLmp_Rq() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Position Lamps Request */
    void set_LHC_PosnLmp_Rq(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets LIMP-Home Cutoff Position Lamps Request */
    bool get_LHC_PosnLmp_Rq() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets emergency shutdown internal fan at the front to 50% */
    void set_LHC_IntFan_F_50_Rq(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets emergency shutdown internal fan at the front to 50% */
    bool get_LHC_IntFan_F_50_Rq() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets emergency shutdown internal fan at the back to 50% */
    void set_LHC_IntFan_R_50_Rq(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets emergency shutdown internal fan at the back to 50% */
    bool get_LHC_IntFan_R_50_Rq() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets emergency shutdown PTC 1. Zweig */
    void set_LHC_PTC1_Rq(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets emergency shutdown PTC 1. Zweig */
    bool get_LHC_PTC1_Rq() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets emergency shutdown PTC 2 branch */
    void set_LHC_PTC2_Rq(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets emergency shutdown PTC 2 branch */
    bool get_LHC_PTC2_Rq() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets emergency shutdown ptc 3. branch */
    void set_LHC_PTC3_Rq(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets emergency shutdown ptc 3. branch */
    bool get_LHC_PTC3_Rq() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets emergency shutdown PTC 4. Branch */
    void set_LHC_PTC4_Rq(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets emergency shutdown PTC 4. Branch */
    bool get_LHC_PTC4_Rq() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets emergency shutdown PTC 5. branch */
    void set_LHC_PTC5_Rq(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets emergency shutdown PTC 5. branch */
    bool get_LHC_PTC5_Rq() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets emergency shutdown PTC 6. branch */
    void set_LHC_PTC6_Rq(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets emergency shutdown PTC 6. branch */
    bool get_LHC_PTC6_Rq() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets emergency shutdown trailer socket */
    void set_LHC_Trlr_Sock_Rq(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets emergency shutdown trailer socket */
    bool get_LHC_Trlr_Sock_Rq() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Telematics / Audio / Phone / GPS Request */
    void set_LHC_Tlm_Rq(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets LIMP-Home Cutoff Telematics / Audio / Phone / GPS Request */
    bool get_LHC_Tlm_Rq() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets emergency shutdown seat ventilation */
    void set_LHC_SeatVn_Rq(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets emergency shutdown seat ventilation */
    bool get_LHC_SeatVn_Rq() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets emergency shutdown seat heating level 1 */
    void set_LHC_SeatHtStg1_rq(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets emergency shutdown seat heating level 1 */
    bool get_LHC_SeatHtStg1_rq() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets emergency shutdown seat heating level 2 */
    void set_LHC_SeatHtStg2_rq(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets emergency shutdown seat heating level 2 */
    bool get_LHC_SeatHtStg2_rq() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets emergency shutdown seat heating level 3 */
    void set_LHC_SeatHtStg3_rq(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets emergency shutdown seat heating level 3 */
    bool get_LHC_SeatHtStg3_rq() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets emergency shutdown fog light */
    void set_LHC_FogLmp_Ft_Rq(bool value){ raw = (raw & 0xffffffffffff7fff) | ((uint64_t)value & 0x1) << 15; }

    /** Gets emergency shutdown fog light */
    bool get_LHC_FogLmp_Ft_Rq() const { return (bool)(raw >> 15 & 0x1); }
        
    /** Sets emergency shutdown motor fan to 50% */
    void set_LHC_EngFan_50_Rq(bool value){ raw = (raw & 0xffffffffffffbfff) | ((uint64_t)value & 0x1) << 14; }

    /** Gets emergency shutdown motor fan to 50% */
    bool get_LHC_EngFan_50_Rq() const { return (bool)(raw >> 14 & 0x1); }
        
    /** Sets emergency shutdown Fund coolbox */
    void set_LHC_CoolBox_R_Rq(bool value){ raw = (raw & 0xffffffffffffdfff) | ((uint64_t)value & 0x1) << 13; }

    /** Gets emergency shutdown Fund coolbox */
    bool get_LHC_CoolBox_R_Rq() const { return (bool)(raw >> 13 & 0x1); }
        
    /** Sets emergency shutdown exterior mirror heating */
    void set_LHC_MirrHt_Rq(bool value){ raw = (raw & 0xffffffffffffefff) | ((uint64_t)value & 0x1) << 12; }

    /** Gets emergency shutdown exterior mirror heating */
    bool get_LHC_MirrHt_Rq() const { return (bool)(raw >> 12 & 0x1); }
        
    /** Sets emergency shutdown windscreen heater */
    void set_LHC_WShHt_Rq(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets emergency shutdown windscreen heater */
    bool get_LHC_WShHt_Rq() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets emergency shutdown steering wheel heating */
    void set_LHC_StW_Ht_Rq(bool value){ raw = (raw & 0xfffffffffffffbff) | ((uint64_t)value & 0x1) << 10; }

    /** Gets emergency shutdown steering wheel heating */
    bool get_LHC_StW_Ht_Rq() const { return (bool)(raw >> 10 & 0x1); }
        
    /** Sets emergency shutdown rear window heating */
    void set_LHC_EBL_Rq(bool value){ raw = (raw & 0xfffffffffffffdff) | ((uint64_t)value & 0x1) << 9; }

    /** Gets emergency shutdown rear window heating */
    bool get_LHC_EBL_Rq() const { return (bool)(raw >> 9 & 0x1); }
        
    /** Sets emergency shutdown wiper storage heating */
    void set_LHC_WprPkHt_Rq(bool value){ raw = (raw & 0xfffffffffffffeff) | ((uint64_t)value & 0x1) << 8; }

    /** Gets emergency shutdown wiper storage heating */
    bool get_LHC_WprPkHt_Rq() const { return (bool)(raw >> 8 & 0x1); }
        
    /** Sets emergency shutdown taxidache sign */
    void set_PN14_LHC_Taxi_Rq(bool value){ raw = (raw & 0xffffffffffffffef) | ((uint64_t)value & 0x1) << 4; }

    /** Gets emergency shutdown taxidache sign */
    bool get_PN14_LHC_Taxi_Rq() const { return (bool)(raw >> 4 & 0x1); }
        
    /** Sets emergency shutdown */
    void set_LHC_ICH_Rq(bool value){ raw = (raw & 0xfffffffffffffff7) | ((uint64_t)value & 0x1) << 3; }

    /** Gets emergency shutdown */
    bool get_LHC_ICH_Rq() const { return (bool)(raw >> 3 & 0x1); }
        
    /** Sets emergency shutdown residual heat use */
    void set_LHC_RHU_Rq(bool value){ raw = (raw & 0xfffffffffffffffb) | ((uint64_t)value & 0x1) << 2; }

    /** Gets emergency shutdown residual heat use */
    bool get_LHC_RHU_Rq() const { return (bool)(raw >> 2 & 0x1); }
        
    /** Sets emergency shutdown for comfort lamps */
    void set_LHC_ComfLmp_Rq(bool value){ raw = (raw & 0xfffffffffffffffd) | ((uint64_t)value & 0x1) << 1; }

    /** Gets emergency shutdown for comfort lamps */
    bool get_LHC_ComfLmp_Rq() const { return (bool)(raw >> 1 & 0x1); }
        
    /** Sets emergency shutdown trunk plug / cigar lighter */
    void set_LHC_TrkSock_Rq(bool value){ raw = (raw & 0xfffffffffffffffe) | ((uint64_t)value & 0x1) << 0; }

    /** Gets emergency shutdown trunk plug / cigar lighter */
    bool get_LHC_TrkSock_Rq() const { return (bool)(raw >> 0 & 0x1); }
        
} PN14_STAT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of PN14_SG_RQ3 */
	uint32_t get_canid(){ return PN14_SG_RQ3_CAN_ID; }
    /** Sets Maximum Charge Voltage During Dynamic Function */
    void set_PN14_LmtVolt_Max(PN14_SG_RQ3_PN14_LmtVolt_Max value){ raw = (raw & 0xfc00ffffffffffff) | ((uint64_t)value & 0x3ff) << 48; }

    /** Gets Maximum Charge Voltage During Dynamic Function */
    PN14_SG_RQ3_PN14_LmtVolt_Max get_PN14_LmtVolt_Max() const { return (PN14_SG_RQ3_PN14_LmtVolt_Max)(raw >> 48 & 0x3ff); }
        
    /** Sets 14 V Powernet Limp-Home Cutoff Level. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Steps) */
    void set_PN14_LHC_Lvl(uint8_t value){ raw = (raw & 0xffff07ffffffffff) | ((uint64_t)value & 0x1f) << 43; }

    /** Gets 14 V Powernet Limp-Home Cutoff Level. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Steps) */
    uint8_t get_PN14_LHC_Lvl() const { return (uint8_t)(raw >> 43 & 0x1f); }
        
    /** Sets Supply Battery Voltage With High Precision */
    void set_PN14_SupBat_VoltHP(PN14_SG_RQ3_PN14_SupBat_VoltHP value){ raw = (raw & 0xfffffffffc00ffff) | ((uint64_t)value & 0x3ff) << 16; }

    /** Gets Supply Battery Voltage With High Precision */
    PN14_SG_RQ3_PN14_SupBat_VoltHP get_PN14_SupBat_VoltHP() const { return (PN14_SG_RQ3_PN14_SupBat_VoltHP)(raw >> 16 & 0x3ff); }
        
    /** Sets Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_PN14_SG_RQ3(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_PN14_SG_RQ3() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_PN14_SG_RQ3(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_PN14_SG_RQ3() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} PN14_SG_RQ3;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of PN14_SG_RQ2 */
	uint32_t get_canid(){ return PN14_SG_RQ2_CAN_ID; }
    /** Sets BNM Backup Relay Request */
    void set_PN14_BackupRelay_Rq(PN14_SG_RQ2_PN14_BackupRelay_Rq value){ raw = (raw & 0xcfffffffffffffff) | ((uint64_t)value & 0x3) << 60; }

    /** Gets BNM Backup Relay Request */
    PN14_SG_RQ2_PN14_BackupRelay_Rq get_PN14_BackupRelay_Rq() const { return (PN14_SG_RQ2_PN14_BackupRelay_Rq)(raw >> 60 & 0x3); }
        
    /** Sets BNM Decouple Relay Request */
    void set_PN14_DecoupleRelay_Rq(PN14_SG_RQ2_PN14_DecoupleRelay_Rq value){ raw = (raw & 0xf3ffffffffffffff) | ((uint64_t)value & 0x3) << 58; }

    /** Gets BNM Decouple Relay Request */
    PN14_SG_RQ2_PN14_DecoupleRelay_Rq get_PN14_DecoupleRelay_Rq() const { return (PN14_SG_RQ2_PN14_DecoupleRelay_Rq)(raw >> 58 & 0x3); }
        
    /** Sets Maximum Charge Voltage During Recuperation */
    void set_PN14_RecupVolt_Max(PN14_SG_RQ2_PN14_RecupVolt_Max value){ raw = (raw & 0xfc00ffffffffffff) | ((uint64_t)value & 0x3ff) << 48; }

    /** Gets Maximum Charge Voltage During Recuperation */
    PN14_SG_RQ2_PN14_RecupVolt_Max get_PN14_RecupVolt_Max() const { return (PN14_SG_RQ2_PN14_RecupVolt_Max)(raw >> 48 & 0x3ff); }
        
    /** Sets Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_PN14_SG_RQ2(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_PN14_SG_RQ2() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_PN14_SG_RQ2(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_PN14_SG_RQ2() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} PN14_SG_RQ2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of PN14_SG_RQ1 */
	uint32_t get_canid(){ return PN14_SG_RQ1_CAN_ID; }
    /** Sets Minimal Generator Load Request (Current = 0) */
    void set_PN14_GenLoadMin_Rq(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Minimal Generator Load Request (Current = 0) */
    bool get_PN14_GenLoadMin_Rq() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Engine Idle Speed Increase Request */
    void set_PN14_EngIdleRPM_Inc_Rq(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Engine Idle Speed Increase Request */
    bool get_PN14_EngIdleRPM_Inc_Rq() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Limit for Ultimate Priority of 14 V Powernet Control Reached, NO AGK Intervention, No Engine Start */
    void set_PN14_PrioLmt_Rch(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Limit for Ultimate Priority of 14 V Powernet Control Reached, NO AGK Intervention, No Engine Start */
    bool get_PN14_PrioLmt_Rch() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Limit for No Additional Powertrain Load Reached */
    void set_PN14_PT_LoadLmt_Rch(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Limit for No Additional Powertrain Load Reached */
    bool get_PN14_PT_LoadLmt_Rch() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Charge Voltage Request */
    void set_PN14_ChrgVolt_Rq(PN14_SG_RQ1_PN14_ChrgVolt_Rq value){ raw = (raw & 0xfc00ffffffffffff) | ((uint64_t)value & 0x3ff) << 48; }

    /** Gets Charge Voltage Request */
    PN14_SG_RQ1_PN14_ChrgVolt_Rq get_PN14_ChrgVolt_Rq() const { return (PN14_SG_RQ1_PN14_ChrgVolt_Rq)(raw >> 48 & 0x3ff); }
        
    /** Sets STOP / START DISABLE REQUEST */
    void set_SSA_Dsabl_Rq_PN14(PN14_SG_RQ1_SSA_Dsabl_Rq_PN14 value){ raw = (raw & 0xffffcfffffffffff) | ((uint64_t)value & 0x3) << 44; }

    /** Gets STOP / START DISABLE REQUEST */
    PN14_SG_RQ1_SSA_Dsabl_Rq_PN14 get_SSA_Dsabl_Rq_PN14() const { return (PN14_SG_RQ1_SSA_Dsabl_Rq_PN14)(raw >> 44 & 0x3); }
        
    /** Sets Minimum Charge Voltage Or Limit Voltage During Starter Fashion */
    void set_PN14_StartVolt_Min(PN14_SG_RQ1_PN14_StartVolt_Min value){ raw = (raw & 0xfffffffffc00ffff) | ((uint64_t)value & 0x3ff) << 16; }

    /** Gets Minimum Charge Voltage Or Limit Voltage During Starter Fashion */
    PN14_SG_RQ1_PN14_StartVolt_Min get_PN14_StartVolt_Min() const { return (PN14_SG_RQ1_PN14_StartVolt_Min)(raw >> 16 & 0x3ff); }
        
    /** Sets Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_PN14_SG_RQ1(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_PN14_SG_RQ1() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets Engine Idle Speed Level Request */
    void set_PN14_EngIdleRPM_Lvl_Rq(PN14_SG_RQ1_PN14_EngIdleRPM_Lvl_Rq value){ raw = (raw & 0xfffffffffffff8ff) | ((uint64_t)value & 0x7) << 8; }

    /** Gets Engine Idle Speed Level Request */
    PN14_SG_RQ1_PN14_EngIdleRPM_Lvl_Rq get_PN14_EngIdleRPM_Lvl_Rq() const { return (PN14_SG_RQ1_PN14_EngIdleRPM_Lvl_Rq)(raw >> 8 & 0x7); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_PN14_SG_RQ1(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_PN14_SG_RQ1() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} PN14_SG_RQ1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KLA_410 */
	uint32_t get_canid(){ return KLA_410_CAN_ID; }
    /** Sets Idle speed lifting to the cooling power increase */
    void set_LL_DZA(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Idle speed lifting to the cooling power increase */
    bool get_LL_DZA() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Signal version Compressor torque */
    void set_SENDE_NEU(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Signal version Compressor torque */
    bool get_SENDE_NEU() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets climate compressor torque parity (straight parity) */
    void set_M_KOMP2PAR(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets climate compressor torque parity (straight parity) */
    bool get_M_KOMP2PAR() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets climate compressor torque parity (straight parity) */
    void set_M_KOMPPAR(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets climate compressor torque parity (straight parity) */
    bool get_M_KOMPPAR() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Climate Compressor Tour Toggle */
    void set_M_KOMPTGL(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Climate Compressor Tour Toggle */
    bool get_M_KOMPTGL() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Cold compressor turned on */
    void set_KOMP_EIN(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Cold compressor turned on */
    bool get_KOMP_EIN() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets refrigerant printing */
    void set_P_KAELTE8(KLA_410h_P_KAELTE8 value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets refrigerant printing */
    KLA_410h_P_KAELTE8 get_P_KAELTE8() const { return (KLA_410h_P_KAELTE8)(raw >> 48 & 0xff); }
        
    /** Sets Torque recording refrigeration compressor */
    void set_M_KOMP(KLA_410h_M_KOMP value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Torque recording refrigeration compressor */
    KLA_410h_M_KOMP get_M_KOMP() const { return (KLA_410h_M_KOMP)(raw >> 40 & 0xff); }
        
    /** Sets Rear refrigeration compressor turned on */
    void set_KOMP_EIN2(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets Rear refrigeration compressor turned on */
    bool get_KOMP_EIN2() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets Outdoor air temperature for thermal management */
    void set_T_AUSSEN_WM(KLA_410h_T_AUSSEN_WM value){ raw = (raw & 0xffffffffff00ffff) | ((uint64_t)value & 0xff) << 16; }

    /** Gets Outdoor air temperature for thermal management */
    KLA_410h_T_AUSSEN_WM get_T_AUSSEN_WM() const { return (KLA_410h_T_AUSSEN_WM)(raw >> 16 & 0xff); }
        
    /** Sets Torque recording refrigeration compressor rear */
    void set_M_KOMP2(KLA_410h_M_KOMP2 value){ raw = (raw & 0xffffffffffff00ff) | ((uint64_t)value & 0xff) << 8; }

    /** Gets Torque recording refrigeration compressor rear */
    KLA_410h_M_KOMP2 get_M_KOMP2() const { return (KLA_410h_M_KOMP2)(raw >> 8 & 0xff); }
        
} KLA_410;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KLA_40E */
	uint32_t get_canid(){ return KLA_40E_CAN_ID; }
    /** Sets Request heat output */
    void set_HZL_ANF(KLA_40Eh_HZL_ANF value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Request heat output */
    KLA_40Eh_HZL_ANF get_HZL_ANF() const { return (KLA_40Eh_HZL_ANF)(raw >> 56 & 0xff); }
        
    /** Sets ENABLE STOP / START AUTOMATIC REQUEST */
    void set_SSA_Enbl_Rq_HVAC(KLA_40Eh_SSA_Enbl_Rq_HVAC value){ raw = (raw & 0xffffe7ffffffffff) | ((uint64_t)value & 0x3) << 43; }

    /** Gets ENABLE STOP / START AUTOMATIC REQUEST */
    KLA_40Eh_SSA_Enbl_Rq_HVAC get_SSA_Enbl_Rq_HVAC() const { return (KLA_40Eh_SSA_Enbl_Rq_HVAC)(raw >> 43 & 0x3); }
        
    /** Sets Request max. Heating on thermal management */
    void set_HEIZ_MAX_WM(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets Request max. Heating on thermal management */
    bool get_HEIZ_MAX_WM() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets Request heating to thermal management */
    void set_HEIZ_WM(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets Request heating to thermal management */
    bool get_HEIZ_WM() const { return (bool)(raw >> 40 & 0x1); }
        
} KLA_40E;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of GW_I_M1 */
	uint32_t get_canid(){ return GW_I_M1_CAN_ID; }
    /** Sets Status sliding / lifting roof */
    void set_SHD_ST(GW_I_M1_SHD_ST value){ raw = (raw & 0x8fffffffffffffff) | ((uint64_t)value & 0x7) << 60; }

    /** Gets Status sliding / lifting roof */
    GW_I_M1_SHD_ST get_SHD_ST() const { return (GW_I_M1_SHD_ST)(raw >> 60 & 0x7); }
        
    /** Sets S: */
    void set_ZV_LADE(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets S: */
    bool get_ZV_LADE() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Universal / unlocking total vehicle */
    void set_ZV_FZG(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Universal / unlocking total vehicle */
    bool get_ZV_FZG() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Intelligent Headlight Control State */
    void set_IHC_Stat_V2(GW_I_M1_IHC_Stat_V2 value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Intelligent Headlight Control State */
    GW_I_M1_IHC_Stat_V2 get_IHC_Stat_V2() const { return (GW_I_M1_IHC_Stat_V2)(raw >> 56 & 0x3); }
        
    /** Sets Emergency light active */
    void set_NOTL_AKT(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Emergency light active */
    bool get_NOTL_AKT() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets Fog lights are turned on */
    void set_NSW_ST_EIN(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets Fog lights are turned on */
    bool get_NSW_ST_EIN() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets Switch on parking light */
    void set_STL_EIN(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets Switch on parking light */
    bool get_STL_EIN() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets S: */
    void set_PL_RE_EIN(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets S: */
    bool get_PL_RE_EIN() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets S: */
    void set_PL_LI_EIN(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets S: */
    bool get_PL_LI_EIN() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets Status Interior light switch */
    void set_ILS_ST(GW_I_M1_ILS_ST value){ raw = (raw & 0xfffff3ffffffffff) | ((uint64_t)value & 0x3) << 42; }

    /** Gets Status Interior light switch */
    GW_I_M1_ILS_ST get_ILS_ST() const { return (GW_I_M1_ILS_ST)(raw >> 42 & 0x3); }
        
    /** Sets in the rear */
    void set_IL_H_EIN(bool value){ raw = (raw & 0xfffffdffffffffff) | ((uint64_t)value & 0x1) << 41; }

    /** Gets in the rear */
    bool get_IL_H_EIN() const { return (bool)(raw >> 41 & 0x1); }
        
    /** Sets Indoor light on the front */
    void set_IL_V_EIN(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets Indoor light on the front */
    bool get_IL_V_EIN() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets Wiper Request Level 2 */
    void set_WISCHER_EIN_2(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets Wiper Request Level 2 */
    bool get_WISCHER_EIN_2() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Wiper Request Level 1 */
    void set_WISCHER_EIN_1(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Wiper Request Level 1 */
    bool get_WISCHER_EIN_1() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets window driver on */
    void set_FF_AUF(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets window driver on */
    bool get_FF_AUF() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets BSM button actuated */
    void set_BSM_Sw_Psd(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets BSM button actuated */
    bool get_BSM_Sw_Psd() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets ALDW button actuated */
    void set_ALDW_Sw_Psd(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets ALDW button actuated */
    bool get_ALDW_Sw_Psd() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets FCW button actuated */
    void set_FCW_Sw_Psd(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets FCW button actuated */
    bool get_FCW_Sw_Psd() const { return (bool)(raw >> 24 & 0x1); }
        
} GW_I_M1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of EZS_A12 */
	uint32_t get_canid(){ return EZS_A12_CAN_ID; }
    /** Sets Open the window rear right / close */
    void set_KB_FHR(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Open the window rear right / close */
    bool get_KB_FHR() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Open window rear window / close */
    void set_KB_FHL(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Open window rear window / close */
    bool get_KB_FHL() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Open the window front right / close */
    void set_KB_FVR(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Open the window front right / close */
    bool get_KB_FVR() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Open / close window front left */
    void set_KB_FVL(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Open / close window front left */
    bool get_KB_FVL() const { return (bool)(raw >> 60 & 0x1); }
        
} EZS_A12;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of EZS_244 */
	uint32_t get_canid(){ return EZS_244_CAN_ID; }
    /** Sets Terminal 50 is switched on */
    void set_KL_50_EIN(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Terminal 50 is switched on */
    bool get_KL_50_EIN() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Terminal 15x is switched on */
    void set_KL_15X_EIN(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Terminal 15x is switched on */
    bool get_KL_15X_EIN() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Terminal 15 is switched on */
    void set_KL_15_EIN(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Terminal 15 is switched on */
    bool get_KL_15_EIN() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Battery voltage */
    void set_U_BATT(EZS_244h_U_BATT value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Battery voltage */
    EZS_244h_U_BATT get_U_BATT() const { return (EZS_244h_U_BATT)(raw >> 48 & 0xff); }
        
} EZS_244;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of EZS_240 */
	uint32_t get_canid(){ return EZS_240_CAN_ID; }
    /** Sets left-hand drive / right-hand drive */
    void set_LL_RLC(EZS_240h_LL_RLC value){ raw = (raw & 0xffcfffffffffffff) | ((uint64_t)value & 0x3) << 52; }

    /** Gets left-hand drive / right-hand drive */
    EZS_240h_LL_RLC get_LL_RLC() const { return (EZS_240h_LL_RLC)(raw >> 52 & 0x3); }
        
    /** Sets reverse input (switch gear only) */
    void set_RG_SCHALT(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets reverse input (switch gear only) */
    bool get_RG_SCHALT() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets Terminal 15 */
    void set_KL_15(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets Terminal 15 */
    bool get_KL_15() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets Terminal 50 */
    void set_KL_50(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Terminal 50 */
    bool get_KL_50() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets bonnet is on */
    void set_MOT_AUF(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets bonnet is on */
    bool get_MOT_AUF() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Status doors */
    void set_Ltch_All_Stat(EZS_240h_Ltch_All_Stat value){ raw = (raw & 0xffffe7ffffffffff) | ((uint64_t)value & 0x3) << 43; }

    /** Gets Status doors */
    EZS_240h_Ltch_All_Stat get_Ltch_All_Stat() const { return (EZS_240h_Ltch_All_Stat)(raw >> 43 & 0x3); }
        
    /** Sets Tail turn door is on */
    void set_HDT_AUF(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Tail turn door is on */
    bool get_HDT_AUF() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets Sliding door right is up (from SAM) */
    void set_STR_AUF_SAM(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets Sliding door right is up (from SAM) */
    bool get_STR_AUF_SAM() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Sliding door left is up (from Sam) */
    void set_STL_AUF_SAM(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Sliding door left is up (from Sam) */
    bool get_STL_AUF_SAM() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets Door front right is on */
    void set_TVR_AUF(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets Door front right is on */
    bool get_TVR_AUF() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets Door front left is on */
    void set_TVL_AUF(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Door front left is on */
    bool get_TVL_AUF() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets Crash ConfirmMit */
    void set_CRASH_CNF(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets Crash ConfirmMit */
    bool get_CRASH_CNF() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets Crash signal from Airbag-SG */
    void set_CRASH(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets Crash signal from Airbag-SG */
    bool get_CRASH() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets ASR ON / OFF */
    void set_ASR_BET(EZS_240h_ASR_BET value){ raw = (raw & 0xffffffff9fffffff) | ((uint64_t)value & 0x3) << 29; }

    /** Gets ASR ON / OFF */
    EZS_240h_ASR_BET get_ASR_BET() const { return (EZS_240h_ASR_BET)(raw >> 29 & 0x3); }
        
    /** Sets Handbrake tightened (control lamp) */
    void set_HAS_KL(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets Handbrake tightened (control lamp) */
    bool get_HAS_KL() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets Wiper outside parking position */
    void set_KL_31B(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets Wiper outside parking position */
    bool get_KL_31B() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets directional flashing right */
    void set_BLI_RE(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets directional flashing right */
    bool get_BLI_RE() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets direction flash left */
    void set_BLI_LI(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets direction flash left */
    bool get_BLI_LI() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets trailer operation recognized */
    void set_ANH_ERK2(EZS_240h_ANH_ERK2 value){ raw = (raw & 0xffffffffff3fffff) | ((uint64_t)value & 0x3) << 22; }

    /** Gets trailer operation recognized */
    EZS_240h_ANH_ERK2 get_ANH_ERK2() const { return (EZS_240h_ANH_ERK2)(raw >> 22 & 0x3); }
        
    /** Sets Switch on low beam */
    void set_ABL_EIN(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets Switch on low beam */
    bool get_ABL_EIN() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets Terminal 54 (brake light) feedback */
    void set_KL54_RM(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets Terminal 54 (brake light) feedback */
    bool get_KL54_RM() const { return (bool)(raw >> 16 & 0x1); }
        
    /** Sets E-suction fan: basic ventilation */
    void set_GBL_AUS(bool value){ raw = (raw & 0xffffffffffffffbf) | ((uint64_t)value & 0x1) << 6; }

    /** Gets E-suction fan: basic ventilation */
    bool get_GBL_AUS() const { return (bool)(raw >> 6 & 0x1); }
        
    /** Sets Country code */
    void set_LDC(EZS_240h_LDC value){ raw = (raw & 0xfffffffffffffffc) | ((uint64_t)value & 0x3) << 0; }

    /** Gets Country code */
    EZS_240h_LDC get_LDC() const { return (EZS_240h_LDC)(raw >> 0 & 0x3); }
        
} EZS_240;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of ENR_3B6 */
	uint32_t get_canid(){ return ENR_3B6_CAN_ID; }
    /** Sets Fzg. Is lowered */
    void set_SENKEN(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Fzg. Is lowered */
    bool get_SENKEN() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Fzg. Is raised */
    void set_HEBEN(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Fzg. Is raised */
    bool get_HEBEN() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Vehicle level rear */
    void set_FZGN_H(ENR_3B6h_FZGN_H value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Vehicle level rear */
    ENR_3B6h_FZGN_H get_FZGN_H() const { return (ENR_3B6h_FZGN_H)(raw >> 48 & 0xff); }
        
} ENR_3B6;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of CONFIG_6FF */
	uint32_t get_canid(){ return CONFIG_6FF_CAN_ID; }
    /** Sets S: */
    void set_LENK_COD(CONFIG_6FFh_LENK_COD value){ raw = (raw & 0xcfffffffffffffff) | ((uint64_t)value & 0x3) << 60; }

    /** Gets S: */
    CONFIG_6FFh_LENK_COD get_LENK_COD() const { return (CONFIG_6FFh_LENK_COD)(raw >> 60 & 0x3); }
        
    /** Sets Country-related SA coding */
    void set_LAND(CONFIG_6FFh_LAND value){ raw = (raw & 0xff0fffffffffffff) | ((uint64_t)value & 0xf) << 52; }

    /** Gets Country-related SA coding */
    CONFIG_6FFh_LAND get_LAND() const { return (CONFIG_6FFh_LAND)(raw >> 52 & 0xf); }
        
    /** Sets Vehicle code attachments */
    void set_FCOD_ANBAU(CONFIG_6FFh_FCOD_ANBAU value){ raw = (raw & 0xfff1ffffffffffff) | ((uint64_t)value & 0x7) << 49; }

    /** Gets Vehicle code attachments */
    CONFIG_6FFh_FCOD_ANBAU get_FCOD_ANBAU() const { return (CONFIG_6FFh_FCOD_ANBAU)(raw >> 49 & 0x7); }
        
    /** Sets Annual specification */
    void set_VER_JAHR(CONFIG_6FFh_VER_JAHR value){ raw = (raw & 0xffff83ffffffffff) | ((uint64_t)value & 0x1f) << 42; }

    /** Gets Annual specification */
    CONFIG_6FFh_VER_JAHR get_VER_JAHR() const { return (CONFIG_6FFh_VER_JAHR)(raw >> 42 & 0x1f); }
        
    /** Sets change year */
    void set_VER_AE(CONFIG_6FFh_VER_AE value){ raw = (raw & 0xfffffcffffffffff) | ((uint64_t)value & 0x3) << 40; }

    /** Gets change year */
    CONFIG_6FFh_VER_AE get_VER_AE() const { return (CONFIG_6FFh_VER_AE)(raw >> 40 & 0x3); }
        
    /** Sets S: */
    void set_EM_Style(CONFIG_6FFh_EM_Style value){ raw = (raw & 0xffffffc0ffffffff) | ((uint64_t)value & 0x3f) << 32; }

    /** Gets S: */
    CONFIG_6FFh_EM_Style get_EM_Style() const { return (CONFIG_6FFh_EM_Style)(raw >> 32 & 0x3f); }
        
    /** Sets Forward Collision Warning Available */
    void set_FCW_Avl(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets Forward Collision Warning Available */
    bool get_FCW_Avl() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets ENR available */
    void set_ENR_VH(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets ENR available */
    bool get_ENR_VH() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets windscreen heater available */
    void set_FSH_VH(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets windscreen heater available */
    bool get_FSH_VH() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets Rain / light sensor available */
    void set_RLS_VH(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets Rain / light sensor available */
    bool get_RLS_VH() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets Advanced Lane Departure Warning Available */
    void set_ALDW_Avl(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets Advanced Lane Departure Warning Available */
    bool get_ALDW_Avl() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets Highlighted assistant available */
    void set_FLA_VH(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets Highlighted assistant available */
    bool get_FLA_VH() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets xenon light available */
    void set_XEN_VH(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets xenon light available */
    bool get_XEN_VH() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets Blind Spot Monitoring Available */
    void set_BSM_Avl(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets Blind Spot Monitoring Available */
    bool get_BSM_Avl() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets Tachograph available */
    void set_TACH_VH(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets Tachograph available */
    bool get_TACH_VH() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets STOP / START AUTOMATIC AVAILABLE */
    void set_SSA_Avl(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets STOP / START AUTOMATIC AVAILABLE */
    bool get_SSA_Avl() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets Air conditioning available */
    void set_KLA_VH(bool value){ raw = (raw & 0xffffffffffffdfff) | ((uint64_t)value & 0x1) << 13; }

    /** Gets Air conditioning available */
    bool get_KLA_VH() const { return (bool)(raw >> 13 & 0x1); }
        
    /** Sets Trailer hitch available */
    void set_AHK_VH(bool value){ raw = (raw & 0xfffffffffffffbff) | ((uint64_t)value & 0x1) << 10; }

    /** Gets Trailer hitch available */
    bool get_AHK_VH() const { return (bool)(raw >> 10 & 0x1); }
        
} CONFIG_6FF;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of CONFIG_6F4 */
	uint32_t get_canid(){ return CONFIG_6F4_CAN_ID; }
    /** Sets rear axle translation (NCV2) */
    void set_ACHSE(CONFIG_6F4h_ACHSE value){ raw = (raw & 0x0fffffffffffffff) | ((uint64_t)value & 0xf) << 60; }

    /** Gets rear axle translation (NCV2) */
    CONFIG_6F4h_ACHSE get_ACHSE() const { return (CONFIG_6F4h_ACHSE)(raw >> 60 & 0xf); }
        
    /** Sets Feather variant */
    void set_FEDER(CONFIG_6F4h_FEDER value){ raw = (raw & 0xf3ffffffffffffff) | ((uint64_t)value & 0x3) << 58; }

    /** Gets Feather variant */
    CONFIG_6F4h_FEDER get_FEDER() const { return (CONFIG_6F4h_FEDER)(raw >> 58 & 0x3); }
        
    /** Sets Stabilizer variant */
    void set_STABI(CONFIG_6F4h_STABI value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Stabilizer variant */
    CONFIG_6F4h_STABI get_STABI() const { return (CONFIG_6F4h_STABI)(raw >> 56 & 0x3); }
        
    /** Sets Vehicle code Wheel circumference front */
    void set_FCOD_UMFANG_V(CONFIG_6F4h_FCOD_UMFANG_V value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Vehicle code Wheel circumference front */
    CONFIG_6F4h_FCOD_UMFANG_V get_FCOD_UMFANG_V() const { return (CONFIG_6F4h_FCOD_UMFANG_V)(raw >> 48 & 0xff); }
        
    /** Sets Vehicle code wheel circumference rear */
    void set_FCOD_UMFANG_H(CONFIG_6F4h_FCOD_UMFANG_H value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Vehicle code wheel circumference rear */
    CONFIG_6F4h_FCOD_UMFANG_H get_FCOD_UMFANG_H() const { return (CONFIG_6F4h_FCOD_UMFANG_H)(raw >> 40 & 0xff); }
        
    /** Sets Vehicle code permissible total weight */
    void set_FCOD_ZGG_VAN(CONFIG_6F4h_FCOD_ZGG_VAN value){ raw = (raw & 0xffffff0fffffffff) | ((uint64_t)value & 0xf) << 36; }

    /** Gets Vehicle code permissible total weight */
    CONFIG_6F4h_FCOD_ZGG_VAN get_FCOD_ZGG_VAN() const { return (CONFIG_6F4h_FCOD_ZGG_VAN)(raw >> 36 & 0xf); }
        
    /** Sets Vehicles roof height */
    void set_FCOD_HOEHE(CONFIG_6F4h_FCOD_HOEHE value){ raw = (raw & 0xfffffff3ffffffff) | ((uint64_t)value & 0x3) << 34; }

    /** Gets Vehicles roof height */
    CONFIG_6F4h_FCOD_HOEHE get_FCOD_HOEHE() const { return (CONFIG_6F4h_FCOD_HOEHE)(raw >> 34 & 0x3); }
        
    /** Sets Tire type */
    void set_REIFEN(CONFIG_6F4h_REIFEN value){ raw = (raw & 0xfffffffcffffffff) | ((uint64_t)value & 0x3) << 32; }

    /** Gets Tire type */
    CONFIG_6F4h_REIFEN get_REIFEN() const { return (CONFIG_6F4h_REIFEN)(raw >> 32 & 0x3); }
        
    /** Sets Vehicle code body */
    void set_FCOD_KAR(CONFIG_6F4h_FCOD_KAR value){ raw = (raw & 0xffffffff1fffffff) | ((uint64_t)value & 0x7) << 29; }

    /** Gets Vehicle code body */
    CONFIG_6F4h_FCOD_KAR get_FCOD_KAR() const { return (CONFIG_6F4h_FCOD_KAR)(raw >> 29 & 0x7); }
        
    /** Sets Vehicle code Frame */
    void set_FCOD_TIEFRAHMEN(CONFIG_6F4h_FCOD_TIEFRAHMEN value){ raw = (raw & 0xffffffffe7ffffff) | ((uint64_t)value & 0x3) << 27; }

    /** Gets Vehicle code Frame */
    CONFIG_6F4h_FCOD_TIEFRAHMEN get_FCOD_TIEFRAHMEN() const { return (CONFIG_6F4h_FCOD_TIEFRAHMEN)(raw >> 27 & 0x3); }
        
    /** Sets Vehicle code wheelbase */
    void set_FCOD_RADST(CONFIG_6F4h_FCOD_RADST value){ raw = (raw & 0xfffffffff8ffffff) | ((uint64_t)value & 0x7) << 24; }

    /** Gets Vehicle code wheelbase */
    CONFIG_6F4h_FCOD_RADST get_FCOD_RADST() const { return (CONFIG_6F4h_FCOD_RADST)(raw >> 24 & 0x7); }
        
    /** Sets Vehicle code four-wheel drive */
    void set_FCOD_ALLRAD(CONFIG_6F4h_FCOD_ALLRAD value){ raw = (raw & 0xffffffffff1fffff) | ((uint64_t)value & 0x7) << 21; }

    /** Gets Vehicle code four-wheel drive */
    CONFIG_6F4h_FCOD_ALLRAD get_FCOD_ALLRAD() const { return (CONFIG_6F4h_FCOD_ALLRAD)(raw >> 21 & 0x7); }
        
    /** Sets Roe-Light deactivated */
    void set_ROE_LIGHT_DEAKT(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets Roe-Light deactivated */
    bool get_ROE_LIGHT_DEAKT() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets LT3 */
    void set_LT3(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets LT3 */
    bool get_LT3() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets Vehicle code Overhang */
    void set_FCOD_UEBERHANG(CONFIG_6F4h_FCOD_UEBERHANG value){ raw = (raw & 0xfffffffffff8ffff) | ((uint64_t)value & 0x7) << 16; }

    /** Gets Vehicle code Overhang */
    CONFIG_6F4h_FCOD_UEBERHANG get_FCOD_UEBERHANG() const { return (CONFIG_6F4h_FCOD_UEBERHANG)(raw >> 16 & 0x7); }
        
    /** Sets Variant coding brake system. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_BS_VAR(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Variant coding brake system. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_BS_VAR() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets Vehicle code axis translation */
    void set_FCOD_ACHSE(CONFIG_6F4h_FCOD_ACHSE value){ raw = (raw & 0xfffffffffffff000) | ((uint64_t)value & 0xfff) << 0; }

    /** Gets Vehicle code axis translation */
    CONFIG_6F4h_FCOD_ACHSE get_FCOD_ACHSE() const { return (CONFIG_6F4h_FCOD_ACHSE)(raw >> 0 & 0xfff); }
        
} CONFIG_6F4;



class ECU_EZS {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case ZGW_24C_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case ZGW_248_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                case VIN_CAN_ID:
                    LAST_FRAME_TIMES[2] = timestamp_now;
                    FRAME_DATA[2] = value;
                    return true;
                case TF_A2_CAN_ID:
                    LAST_FRAME_TIMES[3] = timestamp_now;
                    FRAME_DATA[3] = value;
                    return true;
                case TBCC_RQ_CAN_ID:
                    LAST_FRAME_TIMES[4] = timestamp_now;
                    FRAME_DATA[4] = value;
                    return true;
                case SAM_F_A1_CAN_ID:
                    LAST_FRAME_TIMES[5] = timestamp_now;
                    FRAME_DATA[5] = value;
                    return true;
                case PSM_A2_CAN_ID:
                    LAST_FRAME_TIMES[6] = timestamp_now;
                    FRAME_DATA[6] = value;
                    return true;
                case PSM_3B8_CAN_ID:
                    LAST_FRAME_TIMES[7] = timestamp_now;
                    FRAME_DATA[7] = value;
                    return true;
                case PSM_3B4_CAN_ID:
                    LAST_FRAME_TIMES[8] = timestamp_now;
                    FRAME_DATA[8] = value;
                    return true;
                case PN14_STAT_CAN_ID:
                    LAST_FRAME_TIMES[9] = timestamp_now;
                    FRAME_DATA[9] = value;
                    return true;
                case PN14_SG_RQ3_CAN_ID:
                    LAST_FRAME_TIMES[10] = timestamp_now;
                    FRAME_DATA[10] = value;
                    return true;
                case PN14_SG_RQ2_CAN_ID:
                    LAST_FRAME_TIMES[11] = timestamp_now;
                    FRAME_DATA[11] = value;
                    return true;
                case PN14_SG_RQ1_CAN_ID:
                    LAST_FRAME_TIMES[12] = timestamp_now;
                    FRAME_DATA[12] = value;
                    return true;
                case KLA_410_CAN_ID:
                    LAST_FRAME_TIMES[13] = timestamp_now;
                    FRAME_DATA[13] = value;
                    return true;
                case KLA_40E_CAN_ID:
                    LAST_FRAME_TIMES[14] = timestamp_now;
                    FRAME_DATA[14] = value;
                    return true;
                case GW_I_M1_CAN_ID:
                    LAST_FRAME_TIMES[15] = timestamp_now;
                    FRAME_DATA[15] = value;
                    return true;
                case EZS_A12_CAN_ID:
                    LAST_FRAME_TIMES[16] = timestamp_now;
                    FRAME_DATA[16] = value;
                    return true;
                case EZS_244_CAN_ID:
                    LAST_FRAME_TIMES[17] = timestamp_now;
                    FRAME_DATA[17] = value;
                    return true;
                case EZS_240_CAN_ID:
                    LAST_FRAME_TIMES[18] = timestamp_now;
                    FRAME_DATA[18] = value;
                    return true;
                case ENR_3B6_CAN_ID:
                    LAST_FRAME_TIMES[19] = timestamp_now;
                    FRAME_DATA[19] = value;
                    return true;
                case CONFIG_6FF_CAN_ID:
                    LAST_FRAME_TIMES[20] = timestamp_now;
                    FRAME_DATA[20] = value;
                    return true;
                case CONFIG_6F4_CAN_ID:
                    LAST_FRAME_TIMES[21] = timestamp_now;
                    FRAME_DATA[21] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to ZGW_24C
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ZGW_24C(uint64_t now, uint64_t max_expire_time, ZGW_24C* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to ZGW_248
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ZGW_248(uint64_t now, uint64_t max_expire_time, ZGW_248* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
        /** Sets data in pointer to VIN
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_VIN(uint64_t now, uint64_t max_expire_time, VIN* dest) const {
            if (LAST_FRAME_TIMES[2] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[2] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[2];
                return true;
            }
        }
            
        /** Sets data in pointer to TF_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TF_A2(uint64_t now, uint64_t max_expire_time, TF_A2* dest) const {
            if (LAST_FRAME_TIMES[3] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[3] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[3];
                return true;
            }
        }
            
        /** Sets data in pointer to TBCC_RQ
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TBCC_RQ(uint64_t now, uint64_t max_expire_time, TBCC_RQ* dest) const {
            if (LAST_FRAME_TIMES[4] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[4] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[4];
                return true;
            }
        }
            
        /** Sets data in pointer to SAM_F_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SAM_F_A1(uint64_t now, uint64_t max_expire_time, SAM_F_A1* dest) const {
            if (LAST_FRAME_TIMES[5] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[5] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[5];
                return true;
            }
        }
            
        /** Sets data in pointer to PSM_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PSM_A2(uint64_t now, uint64_t max_expire_time, PSM_A2* dest) const {
            if (LAST_FRAME_TIMES[6] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[6] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[6];
                return true;
            }
        }
            
        /** Sets data in pointer to PSM_3B8
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PSM_3B8(uint64_t now, uint64_t max_expire_time, PSM_3B8* dest) const {
            if (LAST_FRAME_TIMES[7] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[7] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[7];
                return true;
            }
        }
            
        /** Sets data in pointer to PSM_3B4
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PSM_3B4(uint64_t now, uint64_t max_expire_time, PSM_3B4* dest) const {
            if (LAST_FRAME_TIMES[8] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[8] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[8];
                return true;
            }
        }
            
        /** Sets data in pointer to PN14_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PN14_STAT(uint64_t now, uint64_t max_expire_time, PN14_STAT* dest) const {
            if (LAST_FRAME_TIMES[9] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[9] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[9];
                return true;
            }
        }
            
        /** Sets data in pointer to PN14_SG_RQ3
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PN14_SG_RQ3(uint64_t now, uint64_t max_expire_time, PN14_SG_RQ3* dest) const {
            if (LAST_FRAME_TIMES[10] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[10] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[10];
                return true;
            }
        }
            
        /** Sets data in pointer to PN14_SG_RQ2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PN14_SG_RQ2(uint64_t now, uint64_t max_expire_time, PN14_SG_RQ2* dest) const {
            if (LAST_FRAME_TIMES[11] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[11] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[11];
                return true;
            }
        }
            
        /** Sets data in pointer to PN14_SG_RQ1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PN14_SG_RQ1(uint64_t now, uint64_t max_expire_time, PN14_SG_RQ1* dest) const {
            if (LAST_FRAME_TIMES[12] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[12] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[12];
                return true;
            }
        }
            
        /** Sets data in pointer to KLA_410
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KLA_410(uint64_t now, uint64_t max_expire_time, KLA_410* dest) const {
            if (LAST_FRAME_TIMES[13] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[13] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[13];
                return true;
            }
        }
            
        /** Sets data in pointer to KLA_40E
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KLA_40E(uint64_t now, uint64_t max_expire_time, KLA_40E* dest) const {
            if (LAST_FRAME_TIMES[14] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[14] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[14];
                return true;
            }
        }
            
        /** Sets data in pointer to GW_I_M1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_GW_I_M1(uint64_t now, uint64_t max_expire_time, GW_I_M1* dest) const {
            if (LAST_FRAME_TIMES[15] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[15] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[15];
                return true;
            }
        }
            
        /** Sets data in pointer to EZS_A12
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_EZS_A12(uint64_t now, uint64_t max_expire_time, EZS_A12* dest) const {
            if (LAST_FRAME_TIMES[16] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[16] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[16];
                return true;
            }
        }
            
        /** Sets data in pointer to EZS_244
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_EZS_244(uint64_t now, uint64_t max_expire_time, EZS_244* dest) const {
            if (LAST_FRAME_TIMES[17] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[17] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[17];
                return true;
            }
        }
            
        /** Sets data in pointer to EZS_240
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_EZS_240(uint64_t now, uint64_t max_expire_time, EZS_240* dest) const {
            if (LAST_FRAME_TIMES[18] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[18] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[18];
                return true;
            }
        }
            
        /** Sets data in pointer to ENR_3B6
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENR_3B6(uint64_t now, uint64_t max_expire_time, ENR_3B6* dest) const {
            if (LAST_FRAME_TIMES[19] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[19] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[19];
                return true;
            }
        }
            
        /** Sets data in pointer to CONFIG_6FF
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_CONFIG_6FF(uint64_t now, uint64_t max_expire_time, CONFIG_6FF* dest) const {
            if (LAST_FRAME_TIMES[20] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[20] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[20];
                return true;
            }
        }
            
        /** Sets data in pointer to CONFIG_6F4
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_CONFIG_6F4(uint64_t now, uint64_t max_expire_time, CONFIG_6F4* dest) const {
            if (LAST_FRAME_TIMES[21] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[21] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[21];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[22];
		uint64_t LAST_FRAME_TIMES[22];
};
#endif // __ECU_EZS_H_

#endif // EGS_SPRINTER_MODE