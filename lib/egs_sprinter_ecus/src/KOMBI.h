
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'KOMBI'
*/

#ifdef EGS_SPRINTER_MODE

#ifndef __ECU_KOMBI_H_
#define __ECU_KOMBI_H_

#include <stdint.h>
    
#define KOMBI_52A_CAN_ID 0x052A
#define KOMBI_416_CAN_ID 0x0416
#define KOMBI_412_CAN_ID 0x0412
#define KOMBI_408_CAN_ID 0x0408

/** Reset Trip Group 2 */
enum class KOMBI_52Ah_RESET_2 {
	NOACT = 0, // unknown
	RESET = 1, // unknown
	SNV = 3, // unknown
};

/** Reset Trip Group 1 */
enum class KOMBI_52Ah_RESET_1 {
	NOACT = 0, // unknown
	RESET = 1, // unknown
	SNV = 3, // unknown
};

/** IHC Mode Request */
enum class KOMBI_416h_IHC_Md_Rq {
	OFF = 0, // unknown
	ON = 1, // unknown
	NDEF2 = 2, // unknown
};

/** requirement BSM mode */
enum class KOMBI_416h_BSM_Md_Rq {
	OFF = 0, // unknown
	PERM = 1, // unknown
	AUTO = 2, // unknown
	SNA = 3, // unknown
};

/** Speed displayed */
enum class KOMBI_412h_V_ANZ {
	SNV = 255, // unknown
};

/** wheel direction of rotation to V_ANZ */
enum class KOMBI_412h_DRTGANZ {
	PASSIV = 0, // unknown
	VOR = 1, // unknown
	RUECK = 2, // unknown
	SNV = 3, // unknown
};

/** Request PlatRollwarner */
enum class KOMBI_412h_PRW_ANF {
	IDLE = 0, // unknown
	AUS = 1, // unknown
	EIN = 2, // unknown
	SNV = 3, // unknown
};

/** Stand heater was active in the last parking phase */
enum class KOMBI_412h_STH_AKT_PREV {
	STH_NAKT = 0, // unknown
	STH_AKT = 1, // unknown
	NDEF = 2, // unknown
	SNV = 3, // unknown
};

/** Motor setting time */
enum class KOMBI_412h_MAZ_NEU {
	SNV = 255, // unknown
};

/** Tank level */
enum class KOMBI_408h_TANK_FS {
	SNV = 255, // unknown
};

/** outdoor air temperature */
enum class KOMBI_408h_T_AUSSEN {
	SNV = 255, // unknown
};

/** brightness instrument and search lighting */
enum class KOMBI_408h_KL_58D {
	SNV = 255, // unknown
};

/** Motor setting time */
enum class KOMBI_408h_MAZ {
	SNV = 255, // unknown
};

/** mileage */
enum class KOMBI_408h_KM16 {
	SNV = 255, // unknown
};

/** Winter tire maximum speed with 4 bits */
enum class KOMBI_408h_WRC {
	UBG = 0, // unknown
	BG210 = 1, // unknown
	BG190 = 2, // unknown
	BG160 = 3, // unknown
	BG240 = 4, // unknown
	BG230 = 5, // unknown
	BG220 = 6, // unknown
	BG200 = 7, // unknown
	BG180 = 128, // unknown
	BG170 = 129, // unknown
	BG150 = 130, // unknown
	BG140 = 131, // unknown
	BG130 = 132, // unknown
	BG120 = 133, // unknown
	BG110 = 134, // unknown
	BG100 = 135, // unknown
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_52A */
	uint32_t get_canid(){ return KOMBI_52A_CAN_ID; }
    /** Sets Reset Trip Group 2 */
    void set_RESET_2(KOMBI_52Ah_RESET_2 value){ raw = (raw & 0xf3ffffffffffffff) | ((uint64_t)value & 0x3) << 58; }

    /** Gets Reset Trip Group 2 */
    KOMBI_52Ah_RESET_2 get_RESET_2() const { return (KOMBI_52Ah_RESET_2)(raw >> 58 & 0x3); }
        
    /** Sets Reset Trip Group 1 */
    void set_RESET_1(KOMBI_52Ah_RESET_1 value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Reset Trip Group 1 */
    KOMBI_52Ah_RESET_1 get_RESET_1() const { return (KOMBI_52Ah_RESET_1)(raw >> 56 & 0x3); }
        
} KOMBI_52A;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_416 */
	uint32_t get_canid(){ return KOMBI_416_CAN_ID; }
    /** Sets FCW Interface OK */
    void set_FCW_Ifc_ok(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets FCW Interface OK */
    bool get_FCW_Ifc_ok() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Longitudinal Controller Interface OK */
    void set_LDC_Ifc_ok(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Longitudinal Controller Interface OK */
    bool get_LDC_Ifc_ok() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets DTR Acoustic Warning is off */
    void set_DTR_AcustWarn_Off(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets DTR Acoustic Warning is off */
    bool get_DTR_AcustWarn_Off() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets DTR Display is Active */
    void set_DTR_Disp_Actv(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets DTR Display is Active */
    bool get_DTR_Disp_Actv() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets DTR display is OFF */
    void set_DTR_Disp_Off(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets DTR display is OFF */
    bool get_DTR_Disp_Off() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Pressafe Brake Fashion Request */
    void set_LDC_PresfBrkMd_Rq(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Pressafe Brake Fashion Request */
    bool get_LDC_PresfBrkMd_Rq() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets IHC Mode Request */
    void set_IHC_Md_Rq(KOMBI_416h_IHC_Md_Rq value){ raw = (raw & 0xfffcffffffffffff) | ((uint64_t)value & 0x3) << 48; }

    /** Gets IHC Mode Request */
    KOMBI_416h_IHC_Md_Rq get_IHC_Md_Rq() const { return (KOMBI_416h_IHC_Md_Rq)(raw >> 48 & 0x3); }
        
    /** Sets requirement BSM mode */
    void set_BSM_Md_Rq(KOMBI_416h_BSM_Md_Rq value){ raw = (raw & 0xfffffcffffffffff) | ((uint64_t)value & 0x3) << 40; }

    /** Gets requirement BSM mode */
    KOMBI_416h_BSM_Md_Rq get_BSM_Md_Rq() const { return (KOMBI_416h_BSM_Md_Rq)(raw >> 40 & 0x3); }
        
} KOMBI_416;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_412 */
	uint32_t get_canid(){ return KOMBI_412_CAN_ID; }
    /** Sets Speed displayed */
    void set_V_ANZ(KOMBI_412h_V_ANZ value){ raw = (raw & 0xfff000ffffffffff) | ((uint64_t)value & 0xfff) << 40; }

    /** Gets Speed displayed */
    KOMBI_412h_V_ANZ get_V_ANZ() const { return (KOMBI_412h_V_ANZ)(raw >> 40 & 0xfff); }
        
    /** Sets wheel direction of rotation to V_ANZ */
    void set_DRTGANZ(KOMBI_412h_DRTGANZ value){ raw = (raw & 0xffffff3fffffffff) | ((uint64_t)value & 0x3) << 38; }

    /** Gets wheel direction of rotation to V_ANZ */
    KOMBI_412h_DRTGANZ get_DRTGANZ() const { return (KOMBI_412h_DRTGANZ)(raw >> 38 & 0x3); }
        
    /** Sets WIV was reset */
    void set_WIV_RESET(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets WIV was reset */
    bool get_WIV_RESET() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets bonnet open for more than 30 s */
    void set_MOT_AUF_SERVICE(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets bonnet open for more than 30 s */
    bool get_MOT_AUF_SERVICE() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets Request PlatRollwarner */
    void set_PRW_ANF(KOMBI_412h_PRW_ANF value){ raw = (raw & 0xfffffffffffcffff) | ((uint64_t)value & 0x3) << 16; }

    /** Gets Request PlatRollwarner */
    KOMBI_412h_PRW_ANF get_PRW_ANF() const { return (KOMBI_412h_PRW_ANF)(raw >> 16 & 0x3); }
        
    /** Sets Stand heater was active in the last parking phase */
    void set_STH_AKT_PREV(KOMBI_412h_STH_AKT_PREV value){ raw = (raw & 0xffffffffffff3fff) | ((uint64_t)value & 0x3) << 14; }

    /** Gets Stand heater was active in the last parking phase */
    KOMBI_412h_STH_AKT_PREV get_STH_AKT_PREV() const { return (KOMBI_412h_STH_AKT_PREV)(raw >> 14 & 0x3); }
        
    /** Sets route indicator in km [0] or miles [1] */
    void set_MILES_KM(bool value){ raw = (raw & 0xffffffffffffdfff) | ((uint64_t)value & 0x1) << 13; }

    /** Gets route indicator in km [0] or miles [1] */
    bool get_MILES_KM() const { return (bool)(raw >> 13 & 0x1); }
        
    /** Sets Motor setting time */
    void set_MAZ_NEU(KOMBI_412h_MAZ_NEU value){ raw = (raw & 0xfffffffffffff000) | ((uint64_t)value & 0xfff) << 0; }

    /** Gets Motor setting time */
    KOMBI_412h_MAZ_NEU get_MAZ_NEU() const { return (KOMBI_412h_MAZ_NEU)(raw >> 0 & 0xfff); }
        
} KOMBI_412;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of KOMBI_408 */
	uint32_t get_canid(){ return KOMBI_408_CAN_ID; }
    /** Sets Tank level */
    void set_TANK_FS(KOMBI_408h_TANK_FS value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Tank level */
    KOMBI_408h_TANK_FS get_TANK_FS() const { return (KOMBI_408h_TANK_FS)(raw >> 56 & 0xff); }
        
    /** Sets driver's door */
    void set_TF_AUF(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets driver's door */
    bool get_TF_AUF() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Speed Limit / Tempose Display Not possible */
    void set_V_DSPL_AUS(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Speed Limit / Tempose Display Not possible */
    bool get_V_DSPL_AUS() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets tacho oak */
    void set_TACHO_SYM(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets tacho oak */
    bool get_TACHO_SYM() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets MPH instead of km / h (variable speed bends) */
    void set_V_MPH(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets MPH instead of km / h (variable speed bends) */
    bool get_V_MPH() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets pre-glow control lamp defective */
    void set_VGL_KL_DEF(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets pre-glow control lamp defective */
    bool get_VGL_KL_DEF() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets Tank level minimum */
    void set_TFSM(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets Tank level minimum */
    bool get_TFSM() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets Clamp 61 decoupled */
    void set_KL_61E(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Clamp 61 decoupled */
    bool get_KL_61E() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets outdoor air temperature */
    void set_T_AUSSEN(KOMBI_408h_T_AUSSEN value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets outdoor air temperature */
    KOMBI_408h_T_AUSSEN get_T_AUSSEN() const { return (KOMBI_408h_T_AUSSEN)(raw >> 40 & 0xff); }
        
    /** Sets brightness instrument and search lighting */
    void set_KL_58D(KOMBI_408h_KL_58D value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets brightness instrument and search lighting */
    KOMBI_408h_KL_58D get_KL_58D() const { return (KOMBI_408h_KL_58D)(raw >> 32 & 0xff); }
        
    /** Sets Motor setting time */
    void set_MAZ(KOMBI_408h_MAZ value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Motor setting time */
    KOMBI_408h_MAZ get_MAZ() const { return (KOMBI_408h_MAZ)(raw >> 24 & 0xff); }
        
    /** Sets mileage */
    void set_KM16(KOMBI_408h_KM16 value){ raw = (raw & 0xffffffffff0000ff) | ((uint64_t)value & 0xffff) << 8; }

    /** Gets mileage */
    KOMBI_408h_KM16 get_KM16() const { return (KOMBI_408h_KM16)(raw >> 8 & 0xffff); }
        
    /** Sets Winter Tire Top Speed Bit 3 */
    void set_WRC3(bool value){ raw = (raw & 0xffffffffffffff7f) | ((uint64_t)value & 0x1) << 7; }

    /** Gets Winter Tire Top Speed Bit 3 */
    bool get_WRC3() const { return (bool)(raw >> 7 & 0x1); }
        
    /** Sets Surrupy / Criminal Display Active */
    void set_V_DSPL_AKT(bool value){ raw = (raw & 0xffffffffffffffbf) | ((uint64_t)value & 0x1) << 6; }

    /** Gets Surrupy / Criminal Display Active */
    bool get_V_DSPL_AKT() const { return (bool)(raw >> 6 & 0x1); }
        
    /** Sets Switch on Roll Test Mode ESP */
    void set_RT_EIN(bool value){ raw = (raw & 0xfffffffffffffff7) | ((uint64_t)value & 0x1) << 3; }

    /** Gets Switch on Roll Test Mode ESP */
    bool get_RT_EIN() const { return (bool)(raw >> 3 & 0x1); }
        
    /** Sets Winter tire maximum speed with 4 bits */
    void set_WRC(KOMBI_408h_WRC value){ raw = (raw & 0xfffffffffffffff8) | ((uint64_t)value & 0x7) << 0; }

    /** Gets Winter tire maximum speed with 4 bits */
    KOMBI_408h_WRC get_WRC() const { return (KOMBI_408h_WRC)(raw >> 0 & 0x7); }
        
} KOMBI_408;



class ECU_KOMBI {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case KOMBI_52A_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case KOMBI_416_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                case KOMBI_412_CAN_ID:
                    LAST_FRAME_TIMES[2] = timestamp_now;
                    FRAME_DATA[2] = value;
                    return true;
                case KOMBI_408_CAN_ID:
                    LAST_FRAME_TIMES[3] = timestamp_now;
                    FRAME_DATA[3] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to KOMBI_52A
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_52A(uint64_t now, uint64_t max_expire_time, KOMBI_52A* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to KOMBI_416
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_416(uint64_t now, uint64_t max_expire_time, KOMBI_416* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
        /** Sets data in pointer to KOMBI_412
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_412(uint64_t now, uint64_t max_expire_time, KOMBI_412* dest) const {
            if (LAST_FRAME_TIMES[2] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[2] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[2];
                return true;
            }
        }
            
        /** Sets data in pointer to KOMBI_408
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_408(uint64_t now, uint64_t max_expire_time, KOMBI_408* dest) const {
            if (LAST_FRAME_TIMES[3] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now - LAST_FRAME_TIMES[3] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[3];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[4];
		uint64_t LAST_FRAME_TIMES[4];
};
#endif // __ECU_KOMBI_H_

#endif // EGS_SPRINTER_MODE